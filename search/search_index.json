{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to geotask","text":"<p>A python package for geospatial analysis and interactive mapping in a Jupyter environment.</p> <ul> <li>GitHub repo: https://github.com/nazifa02/geotask</li> <li>Documentation: https://nazifa02.github.io/geotask</li> <li>PyPI: https://pypi.org/project/geotask</li> <li>Free software: MIT license</li> </ul>"},{"location":"#introduction","title":"Introduction","text":"<p>Geotask is a Python package designed for interactive mapping and geospatial analysis with minimal coding in a Jupyter environment. It is a free and open-source Python package that is inspired by leafmap and enables users to analyze and visualize geospatial data with minimal coding in a Jupyter environment, such as Google Colab, Jupyter Notebook, and JupyterLab. Geotask is built upon several open-source packages, such as folium and ipyleaflet (for creating interactive maps), and ipywidgets (for designing interactive graphical user interfaces [GUIs]).</p>"},{"location":"#usage","title":"Usage","text":""},{"location":"#key-features","title":"Key Features","text":"<p>Geotask offers a range of features and capabilities that empower geospatial data scientists, researchers, and developers to unlock the potential of their data. Some of the key features include:</p> <ul> <li> <p>Creating an interactive map with just one line of code: Geotask makes it easy to create an interactive map by providing a simple API that allows you to load and visualize geospatial datasets with minimal coding.</p> </li> <li> <p>Changing basemaps interactively: Geotask allows you to change basemaps interactively, providing a variety of options such as OpenStreetMap, OpenTopoMap, and many more.</p> </li> <li> <p>Displaying vector data: Geotask supports various vector data formats, including Shapefile, GeoJSON, and any vector format supported by GeoPandas. You can load and display vector data on the map, enabling you to visualize and analyze spatial features.</p> </li> <li> <p>Displaying raster data: Geotask allows you to load and display raster data, such as GeoTIFFs, on the map. This feature is useful for visualizing satellite imagery, digital elevation models, and other gridded datasets.</p> </li> <li> <p>Creating custom legends: Geotask provides tools for customizing legends on the map, allowing you to represent data values with different colors.</p> </li> <li> <p>Creating time series animations: Geotask enables the creation of time series animations from netCDF data, allowing you to visualize temporal changes in your geospatial datasets.</p> </li> <li> <p>Building interactive web apps: Geotask supports the development of interactive web applications using frameworks like Streamlit. This allows you to share your geospatial analyses and visualizations with others in a user-friendly web interface.</p> </li> </ul> <p>These features and capabilities make geotask an useful tool for geospatial data analysis, and visualization. Whether you are a beginner or an experienced geospatial data scientist, geotask provides an accessible and efficient way to work with geospatial data in Python.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"common/","title":"common module","text":"<p>The common module contains common functions and classes used by the other modules.</p>"},{"location":"common/#geotask.common.hello","title":"<code>hello(name)</code>","text":"<p>Prints \"Hello {name}!\" to console.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to print.</p> required Source code in <code>geotask/common.py</code> <pre><code>def hello (name):\n    \"\"\"Prints \"Hello {name}!\" to console.\n\n    Args:\n       name (str): The name to print.\n    \"\"\"\n    print(f\"Hello {name}!\")\n</code></pre>"},{"location":"common/#geotask.common.hello_world","title":"<code>hello_world()</code>","text":"<p>Prints \"Hello World!\" to the console.</p> Source code in <code>geotask/common.py</code> <pre><code>def hello_world():\n    \"\"\"Prints \"Hello World!\" to the console.\n    \"\"\"\n    print(\"Hello World!\")\n</code></pre>"},{"location":"common/#geotask.common.random_number","title":"<code>random_number()</code>","text":"<p>Returns a random number between 0 and 1.</p> <p>Returns:</p> Type Description <code>float</code> <p>A random number between 0 and 1.</p> Source code in <code>geotask/common.py</code> <pre><code>def random_number():\n    \"\"\"Returns a random number between 0 and 1.\n\n    Returns:\n        float: A random number between 0 and 1.\n    \"\"\"\n    import random\n    return random.random()\n</code></pre>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/nazifa02/geotask/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>geotask could always use more documentation, whether as part of the official geotask docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/nazifa02/geotask/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up geotask for local development.</p> <ol> <li> <p>Fork the geotask repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/geotask.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv geotask\n$ cd geotask/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 geotask tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.8 and later, and     for PyPy. Check https://github.com/nazifa02/geotask/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"geotask/","title":"geotask module","text":"<p>Main module.</p>"},{"location":"geotask/#geotask.geotask.Map","title":"<code> Map            (Map)         </code>","text":"<p>This is the map class that inherits from ipyleaflet.Map.</p> <p>Parameters:</p> Name Type Description Default <code>ipyleaflet</code> <code>Map</code> <p>The ipyleaflet.Map class.</p> required Source code in <code>geotask/geotask.py</code> <pre><code>class Map(ipyleaflet.Map):\n    \"\"\"This is the map class that inherits from ipyleaflet.Map.\n\n    Args:\n        ipyleaflet (Map): The ipyleaflet.Map class.\n    \"\"\"    \n\n    def __init__(self, center=[20, 0], zoom=2, **kwargs):\n        \"\"\"Initialize the map.\n\n        Args:\n            center (list, optional): Set the center of the map. Defaults to [20, 0].\n            zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n        \"\"\"        \n\n        if \"scroll_wheel_zoom\" not in kwargs:\n            kwargs[\"scroll_wheel_zoom\"] = True\n\n        if \"add_layer_control\" not in kwargs:\n            layer_control_flag = True\n\n        else:\n            layer_control_flag = kwargs[\"add_layer_control\"]\n        kwargs.pop(\"add_layer_control\", None)\n\n\n        super().__init__(center=center, zoom=zoom, **kwargs)\n        if layer_control_flag:\n            self.add_layers_control()\n\n        self.add_toolbar()\n        self.add_basemap_gui()\n\n    def add_tile_layer(self, url, name, **kwargs):\n        \"\"\"\n        Adds a tile layer to the current map.\n\n        Parameters:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        **kwargs: Additional keyword arguments for the TileLayer constructor.\n\n        Returns:\n        None\n        \"\"\"\n        layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n        self.add(layer)   \n\n\n    def add_basemap(self, name):\n        \"\"\"\n        Adds a basemap to the current map.\n\n        Args:\n            name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n        Raises:\n            TypeError: If the name is neither a string nor an object representing a basemap.\n\n        Returns:\n            None\n        \"\"\"\n\n        if isinstance(name, str):\n            url = eval(f\"basemaps.{name}\").build_url()\n            self.add_tile_layer(url, name)\n        else:\n            self.add(name)\n\n\n    def add_layers_control(self, position=\"topright\"):\n        \"\"\"Adds a layers control to the map.\n\n        Args:\n            position (str, optional): The position of the layers control. Defaults to \"topright\".\n        \"\"\"\n        self.add_control(ipyleaflet.LayersControl(position=position))\n\n\n    def add_geojson(self, data, name=\"geojson\", **kwargs):\n        \"\"\"Adds a GeoJSON layer to the map.\n\n        Args:\n            data (str | dict): The GeoJSON data as a string, a dictionary, or a URL.\n            name (str, optional): The name of the layer. Defaults to \"geojson\".\n        \"\"\"\n        import json\n        import requests\n\n        if isinstance(data, str):\n            if data.startswith('http://') or data.startswith('https://'):\n                response = requests.get(data)\n                response.raise_for_status() \n                data = response.json()\n            else:\n                # It's a file path\n                with open(data, 'r') as f:\n                    data = json.load(f)\n\n\n        if \"style\" not in kwargs:\n            kwargs[\"style\"] = {\"color\": \"black\", \"weight\": 1, \"fillOpacity\": 0}\n\n        if \"hover_style\" not in kwargs:\n            kwargs[\"hover_style\"] = {\"fillColor\": \"#542974\", \"fillOpacity\": 0.7}\n\n        layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n        self.add(layer)\n\n\n    def add_shp(self, data, name=\"shp\", **kwargs):\n        \"\"\"\n        Adds a shapefile to the current map.\n\n        Args:\n            data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n            name (str, optional): The name of the layer. Defaults to \"shp\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Raises:\n            TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n        Returns:\n            None\n        \"\"\"\n        import shapefile\n        import json\n\n        if isinstance(data, str):\n            with shapefile.Reader(data) as shp:\n                data = shp.__geo_interface__\n\n        self.add_geojson(data, name, **kwargs)\n\n\n\n        import geopandas as gpd\n        from ipyleaflet import GeoData\n        from shapely.geometry import Point, LineString\n\n    def add_vector(self, data):\n        \"\"\"\n        Add vector data to the map.\n\n        Args:\n            data (str or geopandas.GeoDataFrame): The vector data to add. This can be a file path or a GeoDataFrame.\n        \"\"\"\n        import geopandas as gpd\n        from ipyleaflet import GeoData\n\n        if isinstance(data, gpd.GeoDataFrame):\n            vector_layer = GeoData(geo_dataframe=data)\n\n        elif isinstance(data, str):\n            vector_layer = GeoData(geo_dataframe=gpd.read_file(data))\n\n        else:\n            raise ValueError(\"Unsupported data format. Please provide a GeoDataFrame or a file path.\")\n\n        self.add_layer(vector_layer)\n\n\n\n    def add_image(self, url, bounds, name=\"image\", **kwargs):\n        \"\"\"\n        Adds an image overlay to the map.\n\n        Args:\n            url (str): The URL of the image to add.\n            bounds (list): The bounds of the image as a list of tuples.\n            name (str, optional): The name of the image overlay. Defaults to \"image\".\n        \"\"\"\n        layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n        self.add(layer)\n\n\n    def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n        \"\"\"Adds a raster layer to the map.\n\n        Args:\n            data (str or rasterio.DatasetReader): The raster data to add. This can be a file path or a rasterio dataset.\n            colormap (str, optional): The name of the colormap to use. Defaults to \"inferno\".\n            name (str, optional): The name of the raster layer. Defaults to \"raster\".\n            **kwargs: Arbitrary keyword arguments.\n\n        Returns:\n            None\n        \"\"\"\n\n        try:\n            from localtileserver import TileClient, get_leaflet_tile_layer\n        except ImportError:\n            raise ImportError(\"Please install the localtileserver package.\")\n\n\n        client = TileClient(data)\n        layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n        self.add(layer)\n\n        if zoom_to_layer:\n            self.center = client.center()\n            self.zoom = client.default_zoom\n\n    def add_zoom_slider(\n            self, description=\"Zoom level:\", min=0, max=24, value=10, position=\"topright\"\n    ):\n        \"\"\"Adds a zoom slider to the map.\n\n        Args:\n            position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        zoom_slider = widgets.IntSlider(\n            description=description, min=min, max=max, value=value\n        )\n\n        control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n        self.add(control)\n        widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n\n\n    def add_widget(self, widget, position=\"topright\"):\n        \"\"\"Adds a widget to the map.\n\n        Args:\n            widget (object): The widget to add.\n            position (str, optional): The position of the widget. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        control = ipyleaflet.WidgetControl(widget=widget, position=position)\n        self.add(control)\n\n\n    def add_opacity_slider(\n            self, layer_index=-1, description=\"Opacity:\", position=\"topright\"\n    ):\n        \"\"\"Adds an opacity slider for the specified layer.\n\n        Args:\n            layer (object): The layer for which to add the opacity slider.\n            description (str, optional): The description of the opacity slider. Defaults to \"Opacity:\".\n            position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n\n        Returns:\n            None\n        \"\"\"\n        layer = self.layers[layer_index]\n        opacity_slider = widgets.FloatSlider(\n            description=description, min=0, max=1, value=layer.opacity, style={\"description_width\": \"initial\"}\n        )\n\n        def update_opacity(change):\n            \"\"\"\n            Updates the opacity of a layer based on the new value from a slider.\n\n            This function is designed to be used as a callback for an ipywidgets slider. \n            It takes a dictionary with a \"new\" key representing the new value of the slider, \n            and sets the opacity of a global layer variable to this new value.\n\n            Args:\n            change (dict): A dictionary with a \"new\" key representing the new value of the slider.\n\n            Returns:\n                None\n            \"\"\"\n            layer.opacity = change[\"new\"]\n\n        opacity_slider.observe(update_opacity, \"value\")\n\n        control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n        self.add(control)\n\n        from ipywidgets import Dropdown, Button, HBox\n\n\n\n    def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n        \"\"\"Adds a basemap GUI to the map.\n\n        Args:\n            position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n        \"\"\"\n\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        basemap_selector = widgets.Dropdown(\n            options=[\n                \"OpenStreetMap\",\n                \"OpenTopoMap\",\n                \"Esri.WorldImagery\",\n                \"Esri.NatGeoWorldMap\",\n            ],\n            description=\"\",\n            layout=widgets.Layout(width='auto')  # Set the width to auto\n        )\n\n        def update_basemap(change):\n            \"\"\"\n            Updates the basemap with the new selected value.\n\n            Parameters:\n            change (dict): A dictionary containing the new value. The new basemap is expected to be in change['new'].\n\n            Returns:\n            None\n            \"\"\"\n            self.add_basemap(change[\"new\"])\n\n        basemap_selector.observe(update_basemap, \"value\")\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        def on_close_button_clicked(change):\n            \"\"\"\n            Handles the event when the close button is clicked. If the new value of the change is True, it removes the control.\n\n            Parameters:\n            change (dict): A dictionary containing the new value. The new state of the button is expected to be in change['new'].\n\n            Returns:\n            None\n            \"\"\"\n            if change[\"new\"]:\n                # Remove the control when the close button is clicked\n                self.remove(control)\n\n        close_button.observe(on_close_button_clicked, \"value\")\n\n        # Create a box to hold the dropdown and the close button\n        box = widgets.HBox([close_button, basemap_selector])\n\n        control = ipyleaflet.WidgetControl(widget=box, position=position)\n        self.add(control)\n\n\n\n    def add_toolbar(self, position=\"topright\"):\n        \"\"\"Adds a toolbar to the map.\n\n        Args:\n            position (str, optional): The position of the toolbar. Defaults to \"topright\".\n\n        \"\"\"\n\n        padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n        toolbar_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Toolbar\",\n            icon=\"wrench\",\n            layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n        )\n\n        close_button = widgets.ToggleButton(\n            value=False,\n            tooltip=\"Close the tool\",\n            icon=\"times\",\n            button_style=\"primary\",\n            layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\n\n        toolbar = widgets.VBox([toolbar_button])\n\n        def close_click(change):\n            \"\"\"\n            Handles the event when the close button is clicked. If the new value of the change is True, it closes the toolbar_button, close_button, and toolbar.\n\n            Parameters:\n            change (dict): A dictionary containing the new value. The new state of the button is expected to be in change['new'].\n\n            Returns:\n            None\n            \"\"\"\n            if change[\"new\"]:\n                toolbar_button.close()\n                close_button.close()\n                toolbar.close()\n\n\n        close_button.observe(close_click, \"value\")\n\n        rows = 2\n        cols = 2\n        grid = widgets.GridspecLayout(\n            rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n        )\n\n        icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n        for i in range(rows):\n            for j in range(cols):\n                grid[i, j] = widgets.Button(\n                    description=\"\",\n                    button_style=\"primary\",\n                    icon=icons[i * rows + j],\n                    layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n                )\n\n\n        def toolbar_click(change):\n            \"\"\"\n            Handles the event when the toolbar button is clicked. If the new value of the change is True, it sets the children of the toolbar to include both the close button and the toolbar button, as well as the grid. Otherwise, it sets the children of the toolbar to only include the toolbar button.\n\n            Parameters:\n            change (dict): A dictionary containing the new value. The new state of the button is expected to be in change['new'].\n\n            Returns:\n            None\n            \"\"\"\n            if change[\"new\"]:\n                toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n            else:\n                toolbar.children = [toolbar_button]\n\n        toolbar_button.observe(toolbar_click, \"value\")\n        toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n        self.add(toolbar_ctrl)\n\n        output = widgets.Output()\n        output_control = WidgetControl(widget=output, position=\"bottomright\")\n        self.add(output_control)\n\n        def toolbar_callback(change):\n            \"\"\"\n            Handles the event when a toolbar button is clicked. Depending on the icon of the clicked button, it performs different actions.\n\n            Parameters:\n            change: An object representing the clicked button. The icon of the button is expected to be in change.icon.\n\n            Returns:\n            None\n            \"\"\"\n            if change.icon == \"folder-open\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can open a file\")\n            elif change.icon == \"map\":\n                with output:\n                    output.clear_output()\n                    print(f\"You can add a layer\")\n            else:\n                with output:\n                    output.clear_output()\n                    print(f\"Icon: {change.icon}\")\n\n\n        for tool in grid.children:\n            tool.on_click(toolbar_callback)\n\n        with output:\n            print(\"Toolbar is ready\")\n\n\n\n    import pandas as pd\n    import geopandas as gpd\n    import json\n\n\n    def add_points(self, df):\n        \"\"\"\n        Adds points to the map based on the data in the DataFrame. Each point represents a city, with its color indicating the population of the city. A rank column is added to the DataFrame based on the population. A legend is also added to the map to indicate the population ranges for each color.\n\n        Parameters:\n        df (pandas.DataFrame): The DataFrame containing the data. It is expected to have columns 'population', 'latitude', 'longitude', 'name', and 'country'.\n\n        Returns:\n        None\n        \"\"\"\n\n        # Add a rank column based on population\n        df['rank'] = df['population'].rank(method='min')\n\n        # Define the color bins for the population\n        bins = [500, 50000, 500000, 5000000, 50000000, float('inf')]\n        colors = ['#fee5d9', '#fcae91', '#fb6a4a', '#de2d26', '#a50f15']\n        for _, row in df.iterrows():\n            # Determine the color for the population\n            for i, b in enumerate(bins):\n                if row['population'] &lt;= b:\n                    color = colors[i]\n                    break\n\n            circle = ipyleaflet.Circle(\n                location=(row['latitude'], row['longitude']),\n                radius=50000,  # Increase the radius to make the circle bigger\n                color=color,\n                fill_color=color,\n                fill_opacity=0.8\n            )\n            message = widgets.HTML(\n                value=f\"City: {row['name']}&lt;br&gt;&lt;b&gt;Country: {row['country']}&lt;/b&gt;&lt;br&gt;Population: {row['population']}&lt;br&gt;&lt;b&gt;Rank: {row['rank']}&lt;/b&gt;\",\n                placeholder='',\n                description='',\n            )\n            circle.popup = message\n            self.add_layer(circle)\n\n        # Add a legend\n        legend_html = \"\"\"\n        &lt;div style=\"width: 100px; height: 90px; \n            border:2px solid grey; z-index:9999; font-size:10px; line-height:1.2;\"&gt;\n        &lt;strong&gt;&amp;nbsp; Population &lt;/strong&gt;&lt;br&gt;\n        &lt;div style=\"margin-top:5px;\"&gt;\n        &amp;nbsp; 500 &amp;nbsp; &lt;i class=\"fa fa-circle fa-1x\" style=\"color:#fee5d9\"&gt;&lt;/i&gt;&lt;br&gt;\n        &amp;nbsp; 50000 &amp;nbsp; &lt;i class=\"fa fa-circle fa-1x\" style=\"color:#fcae91\"&gt;&lt;/i&gt;&lt;br&gt;\n        &amp;nbsp; 500000 &amp;nbsp; &lt;i class=\"fa fa-circle fa-1x\" style=\"color:#fb6a4a\"&gt;&lt;/i&gt;&lt;br&gt;\n        &amp;nbsp; 5000000 &amp;nbsp; &lt;i class=\"fa fa-circle fa-1x\" style=\"color:#de2d26\"&gt;&lt;/i&gt;&lt;br&gt;\n        &amp;nbsp; 50000000 &amp;nbsp; &lt;i class=\"fa fa-circle fa-1x\" style=\"color:#a50f15\"&gt;&lt;/i&gt;\n        &lt;/div&gt;\n        \"\"\"\n        legend = widgets.HTML(legend_html)\n        legend_control = WidgetControl(widget=legend, position='bottomleft')\n        self.add_control(legend_control)\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.__init__","title":"<code>__init__(self, center=[20, 0], zoom=2, **kwargs)</code>  <code>special</code>","text":"<p>Initialize the map.</p> <p>Parameters:</p> Name Type Description Default <code>center</code> <code>list</code> <p>Set the center of the map. Defaults to [20, 0].</p> <code>[20, 0]</code> <code>zoom</code> <code>int</code> <p>Set the zoom level of the map. Defaults to 2.</p> <code>2</code> Source code in <code>geotask/geotask.py</code> <pre><code>def __init__(self, center=[20, 0], zoom=2, **kwargs):\n    \"\"\"Initialize the map.\n\n    Args:\n        center (list, optional): Set the center of the map. Defaults to [20, 0].\n        zoom (int, optional): Set the zoom level of the map. Defaults to 2.\n    \"\"\"        \n\n    if \"scroll_wheel_zoom\" not in kwargs:\n        kwargs[\"scroll_wheel_zoom\"] = True\n\n    if \"add_layer_control\" not in kwargs:\n        layer_control_flag = True\n\n    else:\n        layer_control_flag = kwargs[\"add_layer_control\"]\n    kwargs.pop(\"add_layer_control\", None)\n\n\n    super().__init__(center=center, zoom=zoom, **kwargs)\n    if layer_control_flag:\n        self.add_layers_control()\n\n    self.add_toolbar()\n    self.add_basemap_gui()\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_basemap","title":"<code>add_basemap(self, name)</code>","text":"<p>Adds a basemap to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str or object</code> <p>The name of the basemap as a string, or an object representing the basemap.</p> required <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the name is neither a string nor an object representing a basemap.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geotask/geotask.py</code> <pre><code>def add_basemap(self, name):\n    \"\"\"\n    Adds a basemap to the current map.\n\n    Args:\n        name (str or object): The name of the basemap as a string, or an object representing the basemap.\n\n    Raises:\n        TypeError: If the name is neither a string nor an object representing a basemap.\n\n    Returns:\n        None\n    \"\"\"\n\n    if isinstance(name, str):\n        url = eval(f\"basemaps.{name}\").build_url()\n        self.add_tile_layer(url, name)\n    else:\n        self.add(name)\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_basemap_gui","title":"<code>add_basemap_gui(self, basemaps=None, position='topright')</code>","text":"<p>Adds a basemap GUI to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the basemap GUI. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>geotask/geotask.py</code> <pre><code>def add_basemap_gui(self, basemaps=None, position=\"topright\"):\n    \"\"\"Adds a basemap GUI to the map.\n\n    Args:\n        position (str, optional): The position of the basemap GUI. Defaults to \"topright\".\n    \"\"\"\n\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    basemap_selector = widgets.Dropdown(\n        options=[\n            \"OpenStreetMap\",\n            \"OpenTopoMap\",\n            \"Esri.WorldImagery\",\n            \"Esri.NatGeoWorldMap\",\n        ],\n        description=\"\",\n        layout=widgets.Layout(width='auto')  # Set the width to auto\n    )\n\n    def update_basemap(change):\n        \"\"\"\n        Updates the basemap with the new selected value.\n\n        Parameters:\n        change (dict): A dictionary containing the new value. The new basemap is expected to be in change['new'].\n\n        Returns:\n        None\n        \"\"\"\n        self.add_basemap(change[\"new\"])\n\n    basemap_selector.observe(update_basemap, \"value\")\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n\n    def on_close_button_clicked(change):\n        \"\"\"\n        Handles the event when the close button is clicked. If the new value of the change is True, it removes the control.\n\n        Parameters:\n        change (dict): A dictionary containing the new value. The new state of the button is expected to be in change['new'].\n\n        Returns:\n        None\n        \"\"\"\n        if change[\"new\"]:\n            # Remove the control when the close button is clicked\n            self.remove(control)\n\n    close_button.observe(on_close_button_clicked, \"value\")\n\n    # Create a box to hold the dropdown and the close button\n    box = widgets.HBox([close_button, basemap_selector])\n\n    control = ipyleaflet.WidgetControl(widget=box, position=position)\n    self.add(control)\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_geojson","title":"<code>add_geojson(self, data, name='geojson', **kwargs)</code>","text":"<p>Adds a GeoJSON layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str | dict</code> <p>The GeoJSON data as a string, a dictionary, or a URL.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"geojson\".</p> <code>'geojson'</code> Source code in <code>geotask/geotask.py</code> <pre><code>def add_geojson(self, data, name=\"geojson\", **kwargs):\n    \"\"\"Adds a GeoJSON layer to the map.\n\n    Args:\n        data (str | dict): The GeoJSON data as a string, a dictionary, or a URL.\n        name (str, optional): The name of the layer. Defaults to \"geojson\".\n    \"\"\"\n    import json\n    import requests\n\n    if isinstance(data, str):\n        if data.startswith('http://') or data.startswith('https://'):\n            response = requests.get(data)\n            response.raise_for_status() \n            data = response.json()\n        else:\n            # It's a file path\n            with open(data, 'r') as f:\n                data = json.load(f)\n\n\n    if \"style\" not in kwargs:\n        kwargs[\"style\"] = {\"color\": \"black\", \"weight\": 1, \"fillOpacity\": 0}\n\n    if \"hover_style\" not in kwargs:\n        kwargs[\"hover_style\"] = {\"fillColor\": \"#542974\", \"fillOpacity\": 0.7}\n\n    layer = ipyleaflet.GeoJSON(data=data, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_image","title":"<code>add_image(self, url, bounds, name='image', **kwargs)</code>","text":"<p>Adds an image overlay to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the image to add.</p> required <code>bounds</code> <code>list</code> <p>The bounds of the image as a list of tuples.</p> required <code>name</code> <code>str</code> <p>The name of the image overlay. Defaults to \"image\".</p> <code>'image'</code> Source code in <code>geotask/geotask.py</code> <pre><code>def add_image(self, url, bounds, name=\"image\", **kwargs):\n    \"\"\"\n    Adds an image overlay to the map.\n\n    Args:\n        url (str): The URL of the image to add.\n        bounds (list): The bounds of the image as a list of tuples.\n        name (str, optional): The name of the image overlay. Defaults to \"image\".\n    \"\"\"\n    layer = ipyleaflet.ImageOverlay(url=url, bounds=bounds, name=name, **kwargs)\n    self.add(layer)\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_layers_control","title":"<code>add_layers_control(self, position='topright')</code>","text":"<p>Adds a layers control to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the layers control. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>geotask/geotask.py</code> <pre><code>def add_layers_control(self, position=\"topright\"):\n    \"\"\"Adds a layers control to the map.\n\n    Args:\n        position (str, optional): The position of the layers control. Defaults to \"topright\".\n    \"\"\"\n    self.add_control(ipyleaflet.LayersControl(position=position))\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_opacity_slider","title":"<code>add_opacity_slider(self, layer_index=-1, description='Opacity:', position='topright')</code>","text":"<p>Adds an opacity slider for the specified layer.</p> <p>Parameters:</p> Name Type Description Default <code>layer</code> <code>object</code> <p>The layer for which to add the opacity slider.</p> required <code>description</code> <code>str</code> <p>The description of the opacity slider. Defaults to \"Opacity:\".</p> <code>'Opacity:'</code> <code>position</code> <code>str</code> <p>The position of the opacity slider. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geotask/geotask.py</code> <pre><code>def add_opacity_slider(\n        self, layer_index=-1, description=\"Opacity:\", position=\"topright\"\n):\n    \"\"\"Adds an opacity slider for the specified layer.\n\n    Args:\n        layer (object): The layer for which to add the opacity slider.\n        description (str, optional): The description of the opacity slider. Defaults to \"Opacity:\".\n        position (str, optional): The position of the opacity slider. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    layer = self.layers[layer_index]\n    opacity_slider = widgets.FloatSlider(\n        description=description, min=0, max=1, value=layer.opacity, style={\"description_width\": \"initial\"}\n    )\n\n    def update_opacity(change):\n        \"\"\"\n        Updates the opacity of a layer based on the new value from a slider.\n\n        This function is designed to be used as a callback for an ipywidgets slider. \n        It takes a dictionary with a \"new\" key representing the new value of the slider, \n        and sets the opacity of a global layer variable to this new value.\n\n        Args:\n        change (dict): A dictionary with a \"new\" key representing the new value of the slider.\n\n        Returns:\n            None\n        \"\"\"\n        layer.opacity = change[\"new\"]\n\n    opacity_slider.observe(update_opacity, \"value\")\n\n    control = ipyleaflet.WidgetControl(widget=opacity_slider, position=position)\n    self.add(control)\n\n    from ipywidgets import Dropdown, Button, HBox\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_points","title":"<code>add_points(self, df)</code>","text":"<p>Adds points to the map based on the data in the DataFrame. Each point represents a city, with its color indicating the population of the city. A rank column is added to the DataFrame based on the population. A legend is also added to the map to indicate the population ranges for each color.</p> <p>df (pandas.DataFrame): The DataFrame containing the data. It is expected to have columns 'population', 'latitude', 'longitude', 'name', and 'country'.</p> <p>None</p> Source code in <code>geotask/geotask.py</code> <pre><code>def add_points(self, df):\n    \"\"\"\n    Adds points to the map based on the data in the DataFrame. Each point represents a city, with its color indicating the population of the city. A rank column is added to the DataFrame based on the population. A legend is also added to the map to indicate the population ranges for each color.\n\n    Parameters:\n    df (pandas.DataFrame): The DataFrame containing the data. It is expected to have columns 'population', 'latitude', 'longitude', 'name', and 'country'.\n\n    Returns:\n    None\n    \"\"\"\n\n    # Add a rank column based on population\n    df['rank'] = df['population'].rank(method='min')\n\n    # Define the color bins for the population\n    bins = [500, 50000, 500000, 5000000, 50000000, float('inf')]\n    colors = ['#fee5d9', '#fcae91', '#fb6a4a', '#de2d26', '#a50f15']\n    for _, row in df.iterrows():\n        # Determine the color for the population\n        for i, b in enumerate(bins):\n            if row['population'] &lt;= b:\n                color = colors[i]\n                break\n\n        circle = ipyleaflet.Circle(\n            location=(row['latitude'], row['longitude']),\n            radius=50000,  # Increase the radius to make the circle bigger\n            color=color,\n            fill_color=color,\n            fill_opacity=0.8\n        )\n        message = widgets.HTML(\n            value=f\"City: {row['name']}&lt;br&gt;&lt;b&gt;Country: {row['country']}&lt;/b&gt;&lt;br&gt;Population: {row['population']}&lt;br&gt;&lt;b&gt;Rank: {row['rank']}&lt;/b&gt;\",\n            placeholder='',\n            description='',\n        )\n        circle.popup = message\n        self.add_layer(circle)\n\n    # Add a legend\n    legend_html = \"\"\"\n    &lt;div style=\"width: 100px; height: 90px; \n        border:2px solid grey; z-index:9999; font-size:10px; line-height:1.2;\"&gt;\n    &lt;strong&gt;&amp;nbsp; Population &lt;/strong&gt;&lt;br&gt;\n    &lt;div style=\"margin-top:5px;\"&gt;\n    &amp;nbsp; 500 &amp;nbsp; &lt;i class=\"fa fa-circle fa-1x\" style=\"color:#fee5d9\"&gt;&lt;/i&gt;&lt;br&gt;\n    &amp;nbsp; 50000 &amp;nbsp; &lt;i class=\"fa fa-circle fa-1x\" style=\"color:#fcae91\"&gt;&lt;/i&gt;&lt;br&gt;\n    &amp;nbsp; 500000 &amp;nbsp; &lt;i class=\"fa fa-circle fa-1x\" style=\"color:#fb6a4a\"&gt;&lt;/i&gt;&lt;br&gt;\n    &amp;nbsp; 5000000 &amp;nbsp; &lt;i class=\"fa fa-circle fa-1x\" style=\"color:#de2d26\"&gt;&lt;/i&gt;&lt;br&gt;\n    &amp;nbsp; 50000000 &amp;nbsp; &lt;i class=\"fa fa-circle fa-1x\" style=\"color:#a50f15\"&gt;&lt;/i&gt;\n    &lt;/div&gt;\n    \"\"\"\n    legend = widgets.HTML(legend_html)\n    legend_control = WidgetControl(widget=legend, position='bottomleft')\n    self.add_control(legend_control)\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_raster","title":"<code>add_raster(self, data, name='raster', zoom_to_layer=True, **kwargs)</code>","text":"<p>Adds a raster layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or rasterio.DatasetReader</code> <p>The raster data to add. This can be a file path or a rasterio dataset.</p> required <code>colormap</code> <code>str</code> <p>The name of the colormap to use. Defaults to \"inferno\".</p> required <code>name</code> <code>str</code> <p>The name of the raster layer. Defaults to \"raster\".</p> <code>'raster'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geotask/geotask.py</code> <pre><code>def add_raster(self, data, name=\"raster\", zoom_to_layer=True, **kwargs):\n    \"\"\"Adds a raster layer to the map.\n\n    Args:\n        data (str or rasterio.DatasetReader): The raster data to add. This can be a file path or a rasterio dataset.\n        colormap (str, optional): The name of the colormap to use. Defaults to \"inferno\".\n        name (str, optional): The name of the raster layer. Defaults to \"raster\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Returns:\n        None\n    \"\"\"\n\n    try:\n        from localtileserver import TileClient, get_leaflet_tile_layer\n    except ImportError:\n        raise ImportError(\"Please install the localtileserver package.\")\n\n\n    client = TileClient(data)\n    layer = get_leaflet_tile_layer(client, name=name, **kwargs)\n    self.add(layer)\n\n    if zoom_to_layer:\n        self.center = client.center()\n        self.zoom = client.default_zoom\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_shp","title":"<code>add_shp(self, data, name='shp', **kwargs)</code>","text":"<p>Adds a shapefile to the current map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or dict</code> <p>The path to the shapefile as a string, or a dictionary representing the shapefile.</p> required <code>name</code> <code>str</code> <p>The name of the layer. Defaults to \"shp\".</p> <code>'shp'</code> <code>**kwargs</code> <p>Arbitrary keyword arguments.</p> <code>{}</code> <p>Exceptions:</p> Type Description <code>TypeError</code> <p>If the data is neither a string nor a dictionary representing a shapefile.</p> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geotask/geotask.py</code> <pre><code>def add_shp(self, data, name=\"shp\", **kwargs):\n    \"\"\"\n    Adds a shapefile to the current map.\n\n    Args:\n        data (str or dict): The path to the shapefile as a string, or a dictionary representing the shapefile.\n        name (str, optional): The name of the layer. Defaults to \"shp\".\n        **kwargs: Arbitrary keyword arguments.\n\n    Raises:\n        TypeError: If the data is neither a string nor a dictionary representing a shapefile.\n\n    Returns:\n        None\n    \"\"\"\n    import shapefile\n    import json\n\n    if isinstance(data, str):\n        with shapefile.Reader(data) as shp:\n            data = shp.__geo_interface__\n\n    self.add_geojson(data, name, **kwargs)\n\n\n\n    import geopandas as gpd\n    from ipyleaflet import GeoData\n    from shapely.geometry import Point, LineString\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_tile_layer","title":"<code>add_tile_layer(self, url, name, **kwargs)</code>","text":"<p>Adds a tile layer to the current map.</p> <p>url (str): The URL of the tile layer. name (str): The name of the tile layer. **kwargs: Additional keyword arguments for the TileLayer constructor.</p> <p>None</p> Source code in <code>geotask/geotask.py</code> <pre><code>def add_tile_layer(self, url, name, **kwargs):\n    \"\"\"\n    Adds a tile layer to the current map.\n\n    Parameters:\n    url (str): The URL of the tile layer.\n    name (str): The name of the tile layer.\n    **kwargs: Additional keyword arguments for the TileLayer constructor.\n\n    Returns:\n    None\n    \"\"\"\n    layer = ipyleaflet.TileLayer(url=url, name=name, **kwargs)\n    self.add(layer)   \n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_toolbar","title":"<code>add_toolbar(self, position='topright')</code>","text":"<p>Adds a toolbar to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the toolbar. Defaults to \"topright\".</p> <code>'topright'</code> Source code in <code>geotask/geotask.py</code> <pre><code>def add_toolbar(self, position=\"topright\"):\n    \"\"\"Adds a toolbar to the map.\n\n    Args:\n        position (str, optional): The position of the toolbar. Defaults to \"topright\".\n\n    \"\"\"\n\n    padding = \"0px 0px 0px 5px\"  # upper, right, bottom, left\n\n    toolbar_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Toolbar\",\n        icon=\"wrench\",\n        layout=widgets.Layout(width=\"28px\", height=\"28px\", padding=padding),\n    )\n\n    close_button = widgets.ToggleButton(\n        value=False,\n        tooltip=\"Close the tool\",\n        icon=\"times\",\n        button_style=\"primary\",\n        layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n    )\n\n    toolbar = widgets.VBox([toolbar_button])\n\n    def close_click(change):\n        \"\"\"\n        Handles the event when the close button is clicked. If the new value of the change is True, it closes the toolbar_button, close_button, and toolbar.\n\n        Parameters:\n        change (dict): A dictionary containing the new value. The new state of the button is expected to be in change['new'].\n\n        Returns:\n        None\n        \"\"\"\n        if change[\"new\"]:\n            toolbar_button.close()\n            close_button.close()\n            toolbar.close()\n\n\n    close_button.observe(close_click, \"value\")\n\n    rows = 2\n    cols = 2\n    grid = widgets.GridspecLayout(\n        rows, cols, grid_gap=\"0px\", layout=widgets.Layout(width=\"65px\")\n    )\n\n    icons = [\"folder-open\", \"map\", \"info\", \"question\"]\n\n    for i in range(rows):\n        for j in range(cols):\n            grid[i, j] = widgets.Button(\n                description=\"\",\n                button_style=\"primary\",\n                icon=icons[i * rows + j],\n                layout=widgets.Layout(width=\"28px\", padding=\"0px\"),\n            )\n\n\n    def toolbar_click(change):\n        \"\"\"\n        Handles the event when the toolbar button is clicked. If the new value of the change is True, it sets the children of the toolbar to include both the close button and the toolbar button, as well as the grid. Otherwise, it sets the children of the toolbar to only include the toolbar button.\n\n        Parameters:\n        change (dict): A dictionary containing the new value. The new state of the button is expected to be in change['new'].\n\n        Returns:\n        None\n        \"\"\"\n        if change[\"new\"]:\n            toolbar.children = [widgets.HBox([close_button, toolbar_button]), grid]\n        else:\n            toolbar.children = [toolbar_button]\n\n    toolbar_button.observe(toolbar_click, \"value\")\n    toolbar_ctrl = WidgetControl(widget=toolbar, position=\"topright\")\n    self.add(toolbar_ctrl)\n\n    output = widgets.Output()\n    output_control = WidgetControl(widget=output, position=\"bottomright\")\n    self.add(output_control)\n\n    def toolbar_callback(change):\n        \"\"\"\n        Handles the event when a toolbar button is clicked. Depending on the icon of the clicked button, it performs different actions.\n\n        Parameters:\n        change: An object representing the clicked button. The icon of the button is expected to be in change.icon.\n\n        Returns:\n        None\n        \"\"\"\n        if change.icon == \"folder-open\":\n            with output:\n                output.clear_output()\n                print(f\"You can open a file\")\n        elif change.icon == \"map\":\n            with output:\n                output.clear_output()\n                print(f\"You can add a layer\")\n        else:\n            with output:\n                output.clear_output()\n                print(f\"Icon: {change.icon}\")\n\n\n    for tool in grid.children:\n        tool.on_click(toolbar_callback)\n\n    with output:\n        print(\"Toolbar is ready\")\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_vector","title":"<code>add_vector(self, data)</code>","text":"<p>Add vector data to the map.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>str or geopandas.GeoDataFrame</code> <p>The vector data to add. This can be a file path or a GeoDataFrame.</p> required Source code in <code>geotask/geotask.py</code> <pre><code>def add_vector(self, data):\n    \"\"\"\n    Add vector data to the map.\n\n    Args:\n        data (str or geopandas.GeoDataFrame): The vector data to add. This can be a file path or a GeoDataFrame.\n    \"\"\"\n    import geopandas as gpd\n    from ipyleaflet import GeoData\n\n    if isinstance(data, gpd.GeoDataFrame):\n        vector_layer = GeoData(geo_dataframe=data)\n\n    elif isinstance(data, str):\n        vector_layer = GeoData(geo_dataframe=gpd.read_file(data))\n\n    else:\n        raise ValueError(\"Unsupported data format. Please provide a GeoDataFrame or a file path.\")\n\n    self.add_layer(vector_layer)\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_widget","title":"<code>add_widget(self, widget, position='topright')</code>","text":"<p>Adds a widget to the map.</p> <p>Parameters:</p> Name Type Description Default <code>widget</code> <code>object</code> <p>The widget to add.</p> required <code>position</code> <code>str</code> <p>The position of the widget. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geotask/geotask.py</code> <pre><code>def add_widget(self, widget, position=\"topright\"):\n    \"\"\"Adds a widget to the map.\n\n    Args:\n        widget (object): The widget to add.\n        position (str, optional): The position of the widget. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    control = ipyleaflet.WidgetControl(widget=widget, position=position)\n    self.add(control)\n</code></pre>"},{"location":"geotask/#geotask.geotask.Map.add_zoom_slider","title":"<code>add_zoom_slider(self, description='Zoom level:', min=0, max=24, value=10, position='topright')</code>","text":"<p>Adds a zoom slider to the map.</p> <p>Parameters:</p> Name Type Description Default <code>position</code> <code>str</code> <p>The position of the zoom slider. Defaults to \"topright\".</p> <code>'topright'</code> <p>Returns:</p> Type Description <p>None</p> Source code in <code>geotask/geotask.py</code> <pre><code>def add_zoom_slider(\n        self, description=\"Zoom level:\", min=0, max=24, value=10, position=\"topright\"\n):\n    \"\"\"Adds a zoom slider to the map.\n\n    Args:\n        position (str, optional): The position of the zoom slider. Defaults to \"topright\".\n\n    Returns:\n        None\n    \"\"\"\n    zoom_slider = widgets.IntSlider(\n        description=description, min=min, max=max, value=value\n    )\n\n    control = ipyleaflet.WidgetControl(widget=zoom_slider, position=position)\n    self.add(control)\n    widgets.jslink((zoom_slider, \"value\"), (self, \"zoom\"))\n</code></pre>"},{"location":"get_started/","title":"Get Started","text":""},{"location":"get_started/#installation","title":"Installation","text":"<pre><code>pip install geotask\n</code></pre>"},{"location":"get_started/#import-geotask","title":"Import geotask","text":"<pre><code>import geotask\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#install-from-pypi","title":"Install from PyPI","text":"<p>geotask is available on PyPI. To install geotask, run this command in your terminal:</p> <pre><code>pip install geotask\n</code></pre> <p>This is the preferred method to install geotask, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#install-from-github","title":"Install from GitHub","text":"<p>To install the development version from GitHub using Git, run the following command in your terminal:</p> <pre><code>pip install git+https://github.com/nazifa02/geotask\n</code></pre>"},{"location":"installation/#upgrade-geotask","title":"Upgrade geotask","text":"<p>If you have installed geotask before and you want to upgrade to the latest version, you can run the following command in your terminal:</p> <pre><code>pip install -U geotask\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use geotask in a project:</p> <pre><code>import geotask\n</code></pre> <p>A brief demonstration of my package can be found in the key_features notebook under <code>examples</code> section.</p>"},{"location":"utils/","title":"utils module","text":"<p>This is the utils module that contains utility functions for the geotask package.</p>"},{"location":"utils/#geotask.utils.csv_to_df","title":"<code>csv_to_df(csv_file)</code>","text":"<p>Converts a CSV file to a pandas DataFrame.</p> <p>Parameters:</p> Name Type Description Default <code>csv_file</code> <code>str</code> <p>The path to the CSV file.</p> required <p>Returns:</p> Type Description <code>pandas.DataFrame</code> <p>The pandas DataFrame.</p> Source code in <code>geotask/utils.py</code> <pre><code>def csv_to_df(csv_file):\n    \"\"\"Converts a CSV file to a pandas DataFrame.\n\n    Args:\n        csv_file (str): The path to the CSV file.\n\n    Returns:\n        pandas.DataFrame: The pandas DataFrame.\n    \"\"\"\n    return pd.read_csv(csv_file)\n</code></pre>"},{"location":"examples/csv/","title":"Csv","text":"In\u00a0[1]: Copied! <pre>!pip install geotask\n</pre> !pip install geotask <pre>Requirement already satisfied: geotask in /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages (0.0.6)\r\nRequirement already satisfied: ipyleaflet in /home/runner/.local/lib/python3.11/site-packages (from geotask) (0.19.0)\r\nRequirement already satisfied: numpy in /home/runner/.local/lib/python3.11/site-packages (from geotask) (1.26.4)\r\n</pre> <pre>Requirement already satisfied: pandas in /home/runner/.local/lib/python3.11/site-packages (from geotask) (2.2.2)\r\nRequirement already satisfied: pyshp in /home/runner/.local/lib/python3.11/site-packages (from geotask) (2.3.1)\r\nRequirement already satisfied: geopandas in /home/runner/.local/lib/python3.11/site-packages (from geotask) (0.14.4)\r\nRequirement already satisfied: localtileserver in /home/runner/.local/lib/python3.11/site-packages (from geotask) (0.10.2)\r\nRequirement already satisfied: leafmap in /home/runner/.local/lib/python3.11/site-packages (from geotask) (0.31.9)\r\nRequirement already satisfied: xarray in /home/runner/.local/lib/python3.11/site-packages (from geotask) (2024.3.0)\r\nRequirement already satisfied: imageio in /home/runner/.local/lib/python3.11/site-packages (from geotask) (2.34.1)\r\nRequirement already satisfied: ipywidgets in /home/runner/.local/lib/python3.11/site-packages (from geotask) (8.1.2)\r\nRequirement already satisfied: requests in /home/runner/.local/lib/python3.11/site-packages (from geotask) (2.31.0)\r\nRequirement already satisfied: folium in /home/runner/.local/lib/python3.11/site-packages (from geotask) (0.16.0)\r\nRequirement already satisfied: matplotlib in /home/runner/.local/lib/python3.11/site-packages (from geotask) (3.8.4)\r\nRequirement already satisfied: IPython in /home/runner/.local/lib/python3.11/site-packages (from geotask) (8.24.0)\r\nRequirement already satisfied: branca&gt;=0.6.0 in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;geotask) (0.7.2)\r\nRequirement already satisfied: jinja2&gt;=2.9 in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;geotask) (3.1.4)\r\nRequirement already satisfied: xyzservices in /home/runner/.local/lib/python3.11/site-packages (from folium-&gt;geotask) (2024.4.0)\r\nRequirement already satisfied: fiona&gt;=1.8.21 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;geotask) (1.9.6)\r\nRequirement already satisfied: packaging in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;geotask) (24.0)\r\nRequirement already satisfied: pyproj&gt;=3.3.0 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;geotask) (3.6.1)\r\nRequirement already satisfied: shapely&gt;=1.8.0 in /home/runner/.local/lib/python3.11/site-packages (from geopandas-&gt;geotask) (2.0.4)\r\n</pre> <pre>Requirement already satisfied: python-dateutil&gt;=2.8.2 in /home/runner/.local/lib/python3.11/site-packages (from pandas-&gt;geotask) (2.9.0.post0)\r\nRequirement already satisfied: pytz&gt;=2020.1 in /home/runner/.local/lib/python3.11/site-packages (from pandas-&gt;geotask) (2024.1)\r\nRequirement already satisfied: tzdata&gt;=2022.7 in /home/runner/.local/lib/python3.11/site-packages (from pandas-&gt;geotask) (2024.1)\r\n</pre> <pre>Requirement already satisfied: pillow&gt;=8.3.2 in /home/runner/.local/lib/python3.11/site-packages (from imageio-&gt;geotask) (10.3.0)\r\nRequirement already satisfied: jupyter-leaflet&lt;0.20,&gt;=0.19 in /home/runner/.local/lib/python3.11/site-packages (from ipyleaflet-&gt;geotask) (0.19.0)\r\nRequirement already satisfied: traittypes&lt;3,&gt;=0.2.1 in /home/runner/.local/lib/python3.11/site-packages (from ipyleaflet-&gt;geotask) (0.2.1)\r\nRequirement already satisfied: comm&gt;=0.1.3 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets-&gt;geotask) (0.2.2)\r\nRequirement already satisfied: traitlets&gt;=4.3.1 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets-&gt;geotask) (5.14.3)\r\nRequirement already satisfied: widgetsnbextension~=4.0.10 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets-&gt;geotask) (4.0.10)\r\nRequirement already satisfied: jupyterlab-widgets~=3.0.10 in /home/runner/.local/lib/python3.11/site-packages (from ipywidgets-&gt;geotask) (3.0.10)\r\n</pre> <pre>Requirement already satisfied: decorator in /home/runner/.local/lib/python3.11/site-packages (from IPython-&gt;geotask) (5.1.1)\r\nRequirement already satisfied: jedi&gt;=0.16 in /home/runner/.local/lib/python3.11/site-packages (from IPython-&gt;geotask) (0.19.1)\r\nRequirement already satisfied: matplotlib-inline in /home/runner/.local/lib/python3.11/site-packages (from IPython-&gt;geotask) (0.1.7)\r\nRequirement already satisfied: prompt-toolkit&lt;3.1.0,&gt;=3.0.41 in /home/runner/.local/lib/python3.11/site-packages (from IPython-&gt;geotask) (3.0.43)\r\nRequirement already satisfied: pygments&gt;=2.4.0 in /home/runner/.local/lib/python3.11/site-packages (from IPython-&gt;geotask) (2.18.0)\r\nRequirement already satisfied: stack-data in /home/runner/.local/lib/python3.11/site-packages (from IPython-&gt;geotask) (0.6.3)\r\nRequirement already satisfied: typing-extensions&gt;=4.6 in /home/runner/.local/lib/python3.11/site-packages (from IPython-&gt;geotask) (4.11.0)\r\nRequirement already satisfied: pexpect&gt;4.3 in /home/runner/.local/lib/python3.11/site-packages (from IPython-&gt;geotask) (4.9.0)\r\n</pre> <pre>Requirement already satisfied: bqplot in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (0.12.43)\r\nRequirement already satisfied: colour in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (0.1.5)\r\nRequirement already satisfied: duckdb in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (0.10.2)\r\nRequirement already satisfied: gdown in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (5.1.0)\r\nRequirement already satisfied: geojson in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (3.1.0)\r\nRequirement already satisfied: ipyevents in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (2.0.2)\r\nRequirement already satisfied: ipyfilechooser in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (0.6.0)\r\nRequirement already satisfied: plotly in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (5.22.0)\r\nRequirement already satisfied: pystac-client in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (0.7.7)\r\nRequirement already satisfied: python-box in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (7.1.1)\r\nRequirement already satisfied: scooby in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (0.10.0)\r\n</pre> <pre>Requirement already satisfied: whiteboxgui in /home/runner/.local/lib/python3.11/site-packages (from leafmap-&gt;geotask) (2.3.0)\r\nRequirement already satisfied: click in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;geotask) (8.1.7)\r\nRequirement already satisfied: flask&lt;4,&gt;=2.0.0 in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;geotask) (3.0.3)\r\nRequirement already satisfied: Flask-Caching in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;geotask) (2.3.0)\r\nRequirement already satisfied: flask-cors in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;geotask) (4.0.1)\r\nRequirement already satisfied: flask-restx&gt;=0.5.0 in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;geotask) (1.3.0)\r\nRequirement already satisfied: rio-tiler in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;geotask) (6.5.0)\r\nRequirement already satisfied: rio-cogeo in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;geotask) (5.3.0)\r\nRequirement already satisfied: server-thread in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;geotask) (0.2.0)\r\nRequirement already satisfied: werkzeug in /home/runner/.local/lib/python3.11/site-packages (from localtileserver-&gt;geotask) (3.0.3)\r\nRequirement already satisfied: contourpy&gt;=1.0.1 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;geotask) (1.2.1)\r\nRequirement already satisfied: cycler&gt;=0.10 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;geotask) (0.12.1)\r\nRequirement already satisfied: fonttools&gt;=4.22.0 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;geotask) (4.51.0)\r\nRequirement already satisfied: kiwisolver&gt;=1.3.1 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;geotask) (1.4.5)\r\nRequirement already satisfied: pyparsing&gt;=2.3.1 in /home/runner/.local/lib/python3.11/site-packages (from matplotlib-&gt;geotask) (3.1.2)\r\n</pre> <pre>Requirement already satisfied: charset-normalizer&lt;4,&gt;=2 in /home/runner/.local/lib/python3.11/site-packages (from requests-&gt;geotask) (3.3.2)\r\nRequirement already satisfied: idna&lt;4,&gt;=2.5 in /home/runner/.local/lib/python3.11/site-packages (from requests-&gt;geotask) (3.7)\r\nRequirement already satisfied: urllib3&lt;3,&gt;=1.21.1 in /home/runner/.local/lib/python3.11/site-packages (from requests-&gt;geotask) (2.2.1)\r\nRequirement already satisfied: certifi&gt;=2017.4.17 in /home/runner/.local/lib/python3.11/site-packages (from requests-&gt;geotask) (2024.2.2)\r\n</pre> <pre>Requirement already satisfied: attrs&gt;=19.2.0 in /home/runner/.local/lib/python3.11/site-packages (from fiona&gt;=1.8.21-&gt;geopandas-&gt;geotask) (23.2.0)\r\nRequirement already satisfied: click-plugins&gt;=1.0 in /home/runner/.local/lib/python3.11/site-packages (from fiona&gt;=1.8.21-&gt;geopandas-&gt;geotask) (1.1.1)\r\nRequirement already satisfied: cligj&gt;=0.5 in /home/runner/.local/lib/python3.11/site-packages (from fiona&gt;=1.8.21-&gt;geopandas-&gt;geotask) (0.7.2)\r\nRequirement already satisfied: six in /home/runner/.local/lib/python3.11/site-packages (from fiona&gt;=1.8.21-&gt;geopandas-&gt;geotask) (1.16.0)\r\nRequirement already satisfied: itsdangerous&gt;=2.1.2 in /home/runner/.local/lib/python3.11/site-packages (from flask&lt;4,&gt;=2.0.0-&gt;localtileserver-&gt;geotask) (2.2.0)\r\nRequirement already satisfied: blinker&gt;=1.6.2 in /home/runner/.local/lib/python3.11/site-packages (from flask&lt;4,&gt;=2.0.0-&gt;localtileserver-&gt;geotask) (1.8.2)\r\n</pre> <pre>Requirement already satisfied: aniso8601&gt;=0.82 in /home/runner/.local/lib/python3.11/site-packages (from flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;geotask) (9.0.1)\r\nRequirement already satisfied: jsonschema in /home/runner/.local/lib/python3.11/site-packages (from flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;geotask) (4.22.0)\r\nRequirement already satisfied: importlib-resources in /home/runner/.local/lib/python3.11/site-packages (from flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;geotask) (6.4.0)\r\n</pre> <pre>Requirement already satisfied: parso&lt;0.9.0,&gt;=0.8.3 in /home/runner/.local/lib/python3.11/site-packages (from jedi&gt;=0.16-&gt;IPython-&gt;geotask) (0.8.4)\r\nRequirement already satisfied: MarkupSafe&gt;=2.0 in /home/runner/.local/lib/python3.11/site-packages (from jinja2&gt;=2.9-&gt;folium-&gt;geotask) (2.1.5)\r\nRequirement already satisfied: ptyprocess&gt;=0.5 in /home/runner/.local/lib/python3.11/site-packages (from pexpect&gt;4.3-&gt;IPython-&gt;geotask) (0.7.0)\r\n</pre> <pre>Requirement already satisfied: wcwidth in /home/runner/.local/lib/python3.11/site-packages (from prompt-toolkit&lt;3.1.0,&gt;=3.0.41-&gt;IPython-&gt;geotask) (0.2.13)\r\n</pre> <pre>Requirement already satisfied: cachelib&lt;0.10.0,&gt;=0.9.0 in /home/runner/.local/lib/python3.11/site-packages (from Flask-Caching-&gt;localtileserver-&gt;geotask) (0.9.0)\r\nRequirement already satisfied: beautifulsoup4 in /home/runner/.local/lib/python3.11/site-packages (from gdown-&gt;leafmap-&gt;geotask) (4.12.3)\r\nRequirement already satisfied: filelock in /home/runner/.local/lib/python3.11/site-packages (from gdown-&gt;leafmap-&gt;geotask) (3.14.0)\r\nRequirement already satisfied: tqdm in /home/runner/.local/lib/python3.11/site-packages (from gdown-&gt;leafmap-&gt;geotask) (4.66.4)\r\n</pre> <pre>Requirement already satisfied: tenacity&gt;=6.2.0 in /home/runner/.local/lib/python3.11/site-packages (from plotly-&gt;leafmap-&gt;geotask) (8.2.3)\r\nRequirement already satisfied: pystac&gt;=1.10.0 in /home/runner/.local/lib/python3.11/site-packages (from pystac[validation]&gt;=1.10.0-&gt;pystac-client-&gt;leafmap-&gt;geotask) (1.10.1)\r\n</pre> <pre>Requirement already satisfied: rasterio&gt;=1.3.3 in /home/runner/.local/lib/python3.11/site-packages (from rio-cogeo-&gt;localtileserver-&gt;geotask) (1.3.10)\r\nRequirement already satisfied: morecantile&lt;6.0,&gt;=5.0 in /home/runner/.local/lib/python3.11/site-packages (from rio-cogeo-&gt;localtileserver-&gt;geotask) (5.3.0)\r\nRequirement already satisfied: pydantic~=2.0 in /home/runner/.local/lib/python3.11/site-packages (from rio-cogeo-&gt;localtileserver-&gt;geotask) (2.7.1)\r\nRequirement already satisfied: cachetools in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;geotask) (5.3.3)\r\nRequirement already satisfied: color-operations in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;geotask) (0.1.3)\r\nRequirement already satisfied: httpx in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;geotask) (0.27.0)\r\nRequirement already satisfied: numexpr in /home/runner/.local/lib/python3.11/site-packages (from rio-tiler-&gt;localtileserver-&gt;geotask) (2.10.0)\r\n</pre> <pre>Requirement already satisfied: uvicorn in /home/runner/.local/lib/python3.11/site-packages (from server-thread-&gt;localtileserver-&gt;geotask) (0.29.0)\r\nRequirement already satisfied: executing&gt;=1.2.0 in /home/runner/.local/lib/python3.11/site-packages (from stack-data-&gt;IPython-&gt;geotask) (2.0.1)\r\nRequirement already satisfied: asttokens&gt;=2.1.0 in /home/runner/.local/lib/python3.11/site-packages (from stack-data-&gt;IPython-&gt;geotask) (2.4.1)\r\nRequirement already satisfied: pure-eval in /home/runner/.local/lib/python3.11/site-packages (from stack-data-&gt;IPython-&gt;geotask) (0.2.2)\r\nRequirement already satisfied: ipytree in /home/runner/.local/lib/python3.11/site-packages (from whiteboxgui-&gt;leafmap-&gt;geotask) (0.2.2)\r\nRequirement already satisfied: whitebox in /home/runner/.local/lib/python3.11/site-packages (from whiteboxgui-&gt;leafmap-&gt;geotask) (2.3.1)\r\n</pre> <pre>Requirement already satisfied: annotated-types&gt;=0.4.0 in /home/runner/.local/lib/python3.11/site-packages (from pydantic~=2.0-&gt;rio-cogeo-&gt;localtileserver-&gt;geotask) (0.6.0)\r\nRequirement already satisfied: pydantic-core==2.18.2 in /home/runner/.local/lib/python3.11/site-packages (from pydantic~=2.0-&gt;rio-cogeo-&gt;localtileserver-&gt;geotask) (2.18.2)\r\n</pre> <pre>Requirement already satisfied: jsonschema-specifications&gt;=2023.03.6 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;geotask) (2023.12.1)\r\nRequirement already satisfied: referencing&gt;=0.28.4 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;geotask) (0.35.1)\r\nRequirement already satisfied: rpds-py&gt;=0.7.1 in /home/runner/.local/lib/python3.11/site-packages (from jsonschema-&gt;flask-restx&gt;=0.5.0-&gt;localtileserver-&gt;geotask) (0.18.1)\r\n</pre> <pre>Requirement already satisfied: affine in /home/runner/.local/lib/python3.11/site-packages (from rasterio&gt;=1.3.3-&gt;rio-cogeo-&gt;localtileserver-&gt;geotask) (2.4.0)\r\nRequirement already satisfied: snuggs&gt;=1.4.1 in /home/runner/.local/lib/python3.11/site-packages (from rasterio&gt;=1.3.3-&gt;rio-cogeo-&gt;localtileserver-&gt;geotask) (1.4.7)\r\nRequirement already satisfied: setuptools in /opt/hostedtoolcache/Python/3.11.9/x64/lib/python3.11/site-packages (from rasterio&gt;=1.3.3-&gt;rio-cogeo-&gt;localtileserver-&gt;geotask) (65.5.0)\r\nRequirement already satisfied: soupsieve&gt;1.2 in /home/runner/.local/lib/python3.11/site-packages (from beautifulsoup4-&gt;gdown-&gt;leafmap-&gt;geotask) (2.5)\r\n</pre> <pre>Requirement already satisfied: anyio in /home/runner/.local/lib/python3.11/site-packages (from httpx-&gt;rio-tiler-&gt;localtileserver-&gt;geotask) (4.3.0)\r\nRequirement already satisfied: httpcore==1.* in /home/runner/.local/lib/python3.11/site-packages (from httpx-&gt;rio-tiler-&gt;localtileserver-&gt;geotask) (1.0.5)\r\nRequirement already satisfied: sniffio in /home/runner/.local/lib/python3.11/site-packages (from httpx-&gt;rio-tiler-&gt;localtileserver-&gt;geotask) (1.3.1)\r\n</pre> <pre>Requirement already satisfied: h11&lt;0.15,&gt;=0.13 in /home/runner/.local/lib/python3.11/site-packages (from httpcore==1.*-&gt;httpx-&gt;rio-tiler-&gt;localtileserver-&gt;geotask) (0.14.0)\r\n</pre> <pre>Requirement already satisfied: PySocks!=1.5.7,&gt;=1.5.6 in /home/runner/.local/lib/python3.11/site-packages (from requests[socks]-&gt;gdown-&gt;leafmap-&gt;geotask) (1.7.1)\r\n</pre> In\u00a0[2]: Copied! <pre>#pip install --upgrade geotask\n</pre> #pip install --upgrade geotask In\u00a0[3]: Copied! <pre>import geotask\nfrom geotask import utils\n</pre> import geotask from geotask import utils In\u00a0[4]: Copied! <pre>csv = \"https://raw.githubusercontent.com/opengeos/data/main/world/world_cities.csv\"\ndf = utils.csv_to_df(csv)\ndf\n</pre> csv = \"https://raw.githubusercontent.com/opengeos/data/main/world/world_cities.csv\" df = utils.csv_to_df(csv) df Out[4]: id name country latitude longitude population 0 1 Bombo UGA 0.58330 32.53330 75000 1 2 Fort Portal UGA 0.67100 30.27500 42670 2 3 Potenza ITA 40.64200 15.79900 69060 3 4 Campobasso ITA 41.56300 14.65600 50762 4 5 Aosta ITA 45.73700 7.31500 34062 ... ... ... ... ... ... ... 1244 1245 Rio de Janeiro BRA -22.92502 -43.22502 11748000 1245 1246 Sao Paulo BRA -23.55868 -46.62502 18845000 1246 1247 Sydney AUS -33.92001 151.18518 4630000 1247 1248 Singapore SGP 1.29303 103.85582 5183700 1248 1249 Hong Kong CHN 22.30498 114.18501 7206000 <p>1249 rows \u00d7 6 columns</p> In\u00a0[5]: Copied! <pre>m = geotask.Map()\nm\n</pre> m = geotask.Map() m Out[5]: In\u00a0[6]: Copied! <pre>m = geotask.Map(\n    layout={'height': '600px'}\n)\nm.add_points(df)\nm\n</pre> m = geotask.Map(     layout={'height': '600px'} ) m.add_points(df) m Out[6]:"},{"location":"examples/csv/#read-a-csv-as-a-pandas-dataframe","title":"Read a CSV as a Pandas DataFrame\u00b6","text":""},{"location":"examples/csv/#add-points-on-map","title":"Add points on Map\u00b6","text":""},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[6]: Copied! <pre>#!pip install folium\n</pre> #!pip install folium In\u00a0[2]: Copied! <pre>import folium\nm = folium.Map(location=(45.5236, -122.6750), zoom_start=13)\nm\n</pre> import folium m = folium.Map(location=(45.5236, -122.6750), zoom_start=13) m Out[2]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[3]: Copied! <pre>import geotask.foliummap as geotask\n</pre> import geotask.foliummap as geotask In\u00a0[4]: Copied! <pre>m = geotask.Map(center=[40, -100], zoom=4)\nurl = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\"\nm.add_raster(url, name=\"SRTM90\", opacity = 0.8)\nm\n</pre> m = geotask.Map(center=[40, -100], zoom=4) url = \"https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif\" m.add_raster(url, name=\"SRTM90\", opacity = 0.8) m Out[4]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook In\u00a0[5]: Copied! <pre># m.save(\"raster.html\")\n</pre> # m.save(\"raster.html\")"},{"location":"examples/geotask_intro/","title":"Geotask intro","text":"<p>Introducing the geotask Python package for interactive mapping</p> <p>Uncomment the following line to install geotask if needed.</p> In\u00a0[1]: Copied! <pre># !pip install geotask\n</pre> # !pip install geotask In\u00a0[2]: Copied! <pre>import geotask\n</pre> import geotask In\u00a0[3]: Copied! <pre>m = geotask.Map()\nm\n</pre> m = geotask.Map() m Out[3]: In\u00a0[4]: Copied! <pre>m = geotask.Map(center=[50, 19], zoom=4)  # center=[lat, lon]\nm\n</pre> m = geotask.Map(center=[50, 19], zoom=4)  # center=[lat, lon] m Out[4]: In\u00a0[5]: Copied! <pre>import geotask.foliummap as geotask\n</pre> import geotask.foliummap as geotask In\u00a0[6]: Copied! <pre>m = geotask.Map()\nm\n</pre> m = geotask.Map() m Out[6]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/geotask_intro/#create-an-interactive-map","title":"Create an interactive map.\u00b6","text":""},{"location":"examples/geotask_intro/#specify-the-default-map-center-and-zoom-level","title":"Specify the default map center and zoom level.\u00b6","text":""},{"location":"examples/geotask_intro/#use-the-folium-plotting-backend","title":"Use the <code>folium</code> plotting backend.\u00b6","text":""},{"location":"examples/image/","title":"Image","text":"In\u00a0[1]: Copied! <pre>#! pip install geotask\n</pre> #! pip install geotask In\u00a0[2]: Copied! <pre>import geotask\n</pre> import geotask In\u00a0[3]: Copied! <pre>m = geotask.Map()\n\nurl=\"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GkWqcL8y_pE1yHcjHycPyQ.jpeg\"\nbounds=((15, 190), (52, 130))\nm.add_image(url, bounds) \nm.scroll_wheel_zoom = True\nm\n</pre> m = geotask.Map()  url=\"https://miro.medium.com/v2/resize:fit:1400/format:webp/1*GkWqcL8y_pE1yHcjHycPyQ.jpeg\" bounds=((15, 190), (52, 130)) m.add_image(url, bounds)  m.scroll_wheel_zoom = True m Out[3]:"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[1]: Copied! <pre>#!pip install geotask\n</pre> #!pip install geotask In\u00a0[2]: Copied! <pre>import geotask\n</pre> import geotask In\u00a0[3]: Copied! <pre>from geotask.geotask import Map\n</pre> from geotask.geotask import Map In\u00a0[4]: Copied! <pre>m=geotask.Map()\nm\n</pre> m=geotask.Map() m Out[4]: In\u00a0[5]: Copied! <pre>m = geotask.Map()\nm.add_basemap(\"NASAGIBS.ViirsEarthAtNight2012\") \nm.add_layers_control()\nm\n</pre> m = geotask.Map() m.add_basemap(\"NASAGIBS.ViirsEarthAtNight2012\")  m.add_layers_control() m Out[5]:"},{"location":"examples/ipywidgets/","title":"Ipywidgets","text":"<p>Introduction to ipywidgets</p> <p>https://ipywidgets.readthedocs.io</p> In\u00a0[1]: Copied! <pre>#!pip install geotask\n</pre> #!pip install geotask In\u00a0[2]: Copied! <pre>import geotask\n</pre> import geotask In\u00a0[3]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[4]: Copied! <pre>m = geotask.Map()\n\nwidget =  widgets.DatePicker(\n    description='Pick a Date',\n    disabled=False\n)\n\nm.add_widget(widget)\n\ncolor = widgets.ColorPicker(\n    concise=False,\n    description='Pick a color',\n    value='blue',\n    disabled=False\n)\n\nm.add_widget(color)\n\nm\n</pre> m = geotask.Map()  widget =  widgets.DatePicker(     description='Pick a Date',     disabled=False )  m.add_widget(widget)  color = widgets.ColorPicker(     concise=False,     description='Pick a color',     value='blue',     disabled=False )  m.add_widget(color)  m Out[4]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[5]: Copied! <pre># pip install ipywidgets\n</pre> # pip install ipywidgets In\u00a0[6]: Copied! <pre>from ipyleaflet import basemaps, WidgetControl\nfrom ipywidgets import IntSlider, ColorPicker, jslink, Output, Button\nimport geotask\n\nm = geotask.Map(center=(46.01, 6.16), zoom=12, basemap=basemaps.OpenTopoMap)\nzoom_slider = IntSlider(description='Zoom:', min=0, max=24, value=7)\nwidget_control1 = WidgetControl(widget=zoom_slider, position='topright')\nm.add(widget_control1)\njslink((zoom_slider, 'value'), (m, 'zoom'))\n\n\noutput_widget = Output(layout={'border': '1px solid black'})\noutput_control1 = WidgetControl(widget=output_widget, position='bottomleft')\nm.add(output_control1)\nm.layout.height = '600px'\n\nm\n</pre> from ipyleaflet import basemaps, WidgetControl from ipywidgets import IntSlider, ColorPicker, jslink, Output, Button import geotask  m = geotask.Map(center=(46.01, 6.16), zoom=12, basemap=basemaps.OpenTopoMap) zoom_slider = IntSlider(description='Zoom:', min=0, max=24, value=7) widget_control1 = WidgetControl(widget=zoom_slider, position='topright') m.add(widget_control1) jslink((zoom_slider, 'value'), (m, 'zoom'))   output_widget = Output(layout={'border': '1px solid black'}) output_control1 = WidgetControl(widget=output_widget, position='bottomleft') m.add(output_control1) m.layout.height = '600px'  m Out[6]: <pre>Map(center=[46.01, 6.16], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_ou\u2026</pre> In\u00a0[7]: Copied! <pre>m.controls\n</pre> m.controls Out[7]: <pre>(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text', 'zoom_out_title']),\n AttributionControl(options=['position', 'prefix'], position='bottomright'),\n LayersControl(options=['collapsed', 'position'], position='topright'),\n WidgetControl(options=['position', 'transparent_bg'], position='topright', widget=VBox(children=(ToggleButton(value=False, icon='wrench', layout=Layout(height='28px', padding='0px 0px 0px 5px', width='28px'), tooltip='Toolbar'),))),\n WidgetControl(options=['position', 'transparent_bg'], position='bottomright', widget=Output(outputs=({'name': 'stdout', 'text': 'Toolbar is ready\\n', 'output_type': 'stream'},))),\n WidgetControl(options=['position', 'transparent_bg'], position='topright', widget=HBox(children=(ToggleButton(value=False, button_style='primary', icon='times', layout=Layout(height='28px', padding='0px 0px 0px 5px', width='28px'), tooltip='Close the tool'), Dropdown(layout=Layout(width='auto'), options=('OpenStreetMap', 'OpenTopoMap', 'Esri.WorldImagery', 'Esri.NatGeoWorldMap'), value='OpenStreetMap')))),\n WidgetControl(options=['position', 'transparent_bg'], position='topright', widget=IntSlider(value=7, description='Zoom:', max=24)),\n WidgetControl(options=['position', 'transparent_bg'], position='bottomleft', widget=Output(layout=Layout(border_bottom='1px solid black', border_left='1px solid black', border_right='1px solid black', border_top='1px solid black'))))</pre> In\u00a0[8]: Copied! <pre>m.clear_controls()\n</pre> m.clear_controls() In\u00a0[9]: Copied! <pre>m.controls = m.controls[:-2]\n</pre> m.controls = m.controls[:-2] In\u00a0[10]: Copied! <pre>output_widget.clear_output()\n</pre> output_widget.clear_output() In\u00a0[11]: Copied! <pre>m.layers\n</pre> m.layers Out[11]: <pre>(TileLayer(attribution='Map data: &amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors, &lt;a href=\"http://viewfinderpanoramas.org\"&gt;SRTM&lt;/a&gt; | Map style: &amp;copy; &lt;a href=\"https://opentopomap.org\"&gt;OpenTopoMap&lt;/a&gt; (&lt;a href=\"https://creativecommons.org/licenses/by-sa/3.0/\"&gt;CC-BY-SA&lt;/a&gt;)', base=True, max_zoom=17, min_zoom=1, name='OpenTopoMap', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://a.tile.opentopomap.org/{z}/{x}/{y}.png'),)</pre> In\u00a0[12]: Copied! <pre>raster_layer = m.layers[-1]\nraster_layer.interact(opacity=(0, 1, 0.1))\n</pre> raster_layer = m.layers[-1] raster_layer.interact(opacity=(0, 1, 0.1)) Out[12]: <pre>Box(children=(FloatSlider(value=1.0, description='opacity', max=1.0),))</pre> In\u00a0[13]: Copied! <pre>import ipywidgets as widgets\n</pre> import ipywidgets as widgets In\u00a0[14]: Copied! <pre>int_slider = widgets.IntSlider(\n    value=2000, min=1984, max=2020, step=1, description=\"Year:\"\n)\nint_slider\n</pre> int_slider = widgets.IntSlider(     value=2000, min=1984, max=2020, step=1, description=\"Year:\" ) int_slider Out[14]: <pre>IntSlider(value=2000, description='Year:', max=2020, min=1984)</pre> In\u00a0[15]: Copied! <pre>int_slider\n</pre> int_slider Out[15]: <pre>IntSlider(value=2000, description='Year:', max=2020, min=1984)</pre> In\u00a0[16]: Copied! <pre>int_slider.value\n</pre> int_slider.value Out[16]: <pre>2000</pre> In\u00a0[17]: Copied! <pre>int_slider.value = 2019\n</pre> int_slider.value = 2019 In\u00a0[18]: Copied! <pre>int_slider.description = \"Year of birth:\"\n</pre> int_slider.description = \"Year of birth:\" In\u00a0[19]: Copied! <pre>float_slider = widgets.FloatSlider(\n    value=0, min=-1, max=1, step=0.05, description=\"Threshold:\"\n)\nfloat_slider\n</pre> float_slider = widgets.FloatSlider(     value=0, min=-1, max=1, step=0.05, description=\"Threshold:\" ) float_slider Out[19]: <pre>FloatSlider(value=0.0, description='Threshold:', max=1.0, min=-1.0, step=0.05)</pre> In\u00a0[20]: Copied! <pre>float_slider.value\n</pre> float_slider.value Out[20]: <pre>0.0</pre> In\u00a0[21]: Copied! <pre>int_progress = widgets.IntProgress(\n    value=7,\n    min=0,\n    max=10,\n    step=1,\n    description=\"Loading:\",\n    bar_style=\"\",  # 'success', 'info', 'warning', 'danger' or ''\n    orientation=\"horizontal\",\n)\nint_progress\n</pre> int_progress = widgets.IntProgress(     value=7,     min=0,     max=10,     step=1,     description=\"Loading:\",     bar_style=\"\",  # 'success', 'info', 'warning', 'danger' or ''     orientation=\"horizontal\", ) int_progress Out[21]: <pre>IntProgress(value=7, description='Loading:', max=10)</pre> In\u00a0[22]: Copied! <pre>int_progress.value = 9\n</pre> int_progress.value = 9 In\u00a0[23]: Copied! <pre>int_text = widgets.IntText(\n    value=7,\n    description=\"Any:\",\n)\nint_text\n</pre> int_text = widgets.IntText(     value=7,     description=\"Any:\", ) int_text Out[23]: <pre>IntText(value=7, description='Any:')</pre> In\u00a0[24]: Copied! <pre>float_text = widgets.FloatText(\n    value=7.5,\n    step=2,\n    description=\"Any:\",\n)\nfloat_text\n</pre> float_text = widgets.FloatText(     value=7.5,     step=2,     description=\"Any:\", ) float_text Out[24]: <pre>FloatText(value=7.5, description='Any:', step=2.0)</pre> In\u00a0[25]: Copied! <pre>toggle_button = widgets.ToggleButton(\n    value=False,\n    description=\"Click me\",\n    disabled=False,\n    button_style=\"warning\",  # 'success', 'info', 'warning', 'danger' or ''\n    tooltip=\"Description\",\n    icon=\"map\",  # (FontAwesome names without the `fa-` prefix)\n)\ntoggle_button\n</pre> toggle_button = widgets.ToggleButton(     value=False,     description=\"Click me\",     disabled=False,     button_style=\"warning\",  # 'success', 'info', 'warning', 'danger' or ''     tooltip=\"Description\",     icon=\"map\",  # (FontAwesome names without the `fa-` prefix) ) toggle_button Out[25]: <pre>ToggleButton(value=False, button_style='warning', description='Click me', icon='map', tooltip='Description')</pre> In\u00a0[26]: Copied! <pre>toggle_button.value\n</pre> toggle_button.value Out[26]: <pre>False</pre> In\u00a0[27]: Copied! <pre>checkbox = widgets.Checkbox(\n    value=False, description=\"Check me\", disabled=False, indent=False\n)\ncheckbox\n</pre> checkbox = widgets.Checkbox(     value=False, description=\"Check me\", disabled=False, indent=False ) checkbox Out[27]: <pre>Checkbox(value=False, description='Check me', indent=False)</pre> In\u00a0[28]: Copied! <pre>checkbox.value\n</pre> checkbox.value Out[28]: <pre>False</pre> In\u00a0[29]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\"\n)\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\" ) dropdown Out[29]: <pre>Dropdown(description='Country:', index=1, options=('USA', 'Canada', 'Mexico'), value='Canada')</pre> In\u00a0[30]: Copied! <pre>dropdown.value\n</pre> dropdown.value Out[30]: <pre>'Canada'</pre> In\u00a0[31]: Copied! <pre>radio_buttons = widgets.RadioButtons(\n    options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\"\n)\nradio_buttons\n</pre> radio_buttons = widgets.RadioButtons(     options=[\"USA\", \"Canada\", \"Mexico\"], value=\"Canada\", description=\"Country:\" ) radio_buttons Out[31]: <pre>RadioButtons(description='Country:', index=1, options=('USA', 'Canada', 'Mexico'), value='Canada')</pre> In\u00a0[32]: Copied! <pre>radio_buttons.value\n</pre> radio_buttons.value Out[32]: <pre>'Canada'</pre> In\u00a0[33]: Copied! <pre>text = widgets.Text(\n    value=\"\",\n    placeholder=\"Enter a country name\",\n    description=\"Country:\",\n    disabled=False,\n)\ntext\n</pre> text = widgets.Text(     value=\"\",     placeholder=\"Enter a country name\",     description=\"Country:\",     disabled=False, ) text Out[33]: <pre>Text(value='', description='Country:', placeholder='Enter a country name')</pre> In\u00a0[34]: Copied! <pre>text.value\n</pre> text.value Out[34]: <pre>''</pre> In\u00a0[35]: Copied! <pre>widgets.Textarea(\n    value=\"Hello World\",\n    placeholder=\"Type something\",\n    description=\"String:\",\n    disabled=False,\n)\n</pre> widgets.Textarea(     value=\"Hello World\",     placeholder=\"Type something\",     description=\"String:\",     disabled=False, ) Out[35]: <pre>Textarea(value='Hello World', description='String:', placeholder='Type something')</pre> In\u00a0[36]: Copied! <pre>widgets.HTML(\n    value=\"Hello &lt;b&gt;World&lt;/b&gt;\",\n    placeholder=\"Some HTML\",\n    description=\"Some HTML\",\n)\n</pre> widgets.HTML(     value=\"Hello World\",     placeholder=\"Some HTML\",     description=\"Some HTML\", ) Out[36]: <pre>HTML(value='Hello &lt;b&gt;World&lt;/b&gt;', description='Some HTML', placeholder='Some HTML')</pre> In\u00a0[37]: Copied! <pre>widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"200\" height=\"200\"&gt;'\n)\n</pre> widgets.HTML(     value='' ) Out[37]: <pre>HTML(value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"200\" height=\"\u2026</pre> In\u00a0[38]: Copied! <pre>button = widgets.Button(\n    description=\"\",\n    button_style=\"primary\",  # 'success', 'info', 'warning', 'danger' or ''\n    tooltip=\"Click me\",\n    icon=\"wrench\",  # (FontAwesome names without the `fa-` prefix)\n)\nbutton.layout.width = \"35px\"\nbutton\n</pre> button = widgets.Button(     description=\"\",     button_style=\"primary\",  # 'success', 'info', 'warning', 'danger' or ''     tooltip=\"Click me\",     icon=\"wrench\",  # (FontAwesome names without the `fa-` prefix) ) button.layout.width = \"35px\" button Out[38]: <pre>Button(button_style='primary', icon='wrench', layout=Layout(width='35px'), style=ButtonStyle(), tooltip='Click\u2026</pre> In\u00a0[39]: Copied! <pre>date_picker = widgets.DatePicker(description=\"Pick a Date\", disabled=False)\ndate_picker\n</pre> date_picker = widgets.DatePicker(description=\"Pick a Date\", disabled=False) date_picker Out[39]: <pre>DatePicker(value=None, description='Pick a Date', step=1)</pre> In\u00a0[40]: Copied! <pre>date_picker.value\n</pre> date_picker.value In\u00a0[41]: Copied! <pre>color_picker = widgets.ColorPicker(\n    concise=False, description=\"Pick a color\", value=\"blue\", disabled=False\n)\ncolor_picker\n</pre> color_picker = widgets.ColorPicker(     concise=False, description=\"Pick a color\", value=\"blue\", disabled=False ) color_picker Out[41]: <pre>ColorPicker(value='blue', description='Pick a color')</pre> In\u00a0[42]: Copied! <pre>color_picker.value\n</pre> color_picker.value Out[42]: <pre>'blue'</pre> In\u00a0[43]: Copied! <pre>out = widgets.Output(layout={\"border\": \"1px solid black\"})\nout\n</pre> out = widgets.Output(layout={\"border\": \"1px solid black\"}) out Out[43]: <pre>Output(layout=Layout(border_bottom='1px solid black', border_left='1px solid black', border_right='1px solid b\u2026</pre> In\u00a0[44]: Copied! <pre>with out:\n    out.clear_output()\n    for i in range(10):\n        print(i, \"Hello world!\")\n\n    display(widgets.IntSlider())\n    display(widgets.Button(description=\"Hello\"))\n</pre> with out:     out.clear_output()     for i in range(10):         print(i, \"Hello world!\")      display(widgets.IntSlider())     display(widgets.Button(description=\"Hello\")) In\u00a0[45]: Copied! <pre>from IPython.display import YouTubeVideo\n\nout.clear_output()\nwith out:\n    display(YouTubeVideo(\"mA21Us_3m28\"))\nout\n</pre> from IPython.display import YouTubeVideo  out.clear_output() with out:     display(YouTubeVideo(\"mA21Us_3m28\")) out Out[45]: <pre>Output(layout=Layout(border_bottom='1px solid black', border_left='1px solid black', border_right='1px solid b\u2026</pre> In\u00a0[46]: Copied! <pre>out.clear_output()\nwith out:\n    display(widgets.IntSlider())\nout\n</pre> out.clear_output() with out:     display(widgets.IntSlider()) out Out[46]: <pre>Output(layout=Layout(border_bottom='1px solid black', border_left='1px solid black', border_right='1px solid b\u2026</pre> In\u00a0[47]: Copied! <pre>output = widgets.Output()\noutput\n</pre> output = widgets.Output() output Out[47]: <pre>Output()</pre> In\u00a0[48]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[49]: Copied! <pre>import geotask\n</pre> import geotask In\u00a0[50]: Copied! <pre>m = geotask.Map()\nm\n</pre> m = geotask.Map() m Out[50]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[51]: Copied! <pre>output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\noutput_control = WidgetControl(widget=output_widget, position=\"bottomright\")\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={\"border\": \"1px solid black\"}) output_control = WidgetControl(widget=output_widget, position=\"bottomright\") m.add_control(output_control) In\u00a0[52]: Copied! <pre>with output_widget:\n    print(\"Nice map!\")\n</pre> with output_widget:     print(\"Nice map!\") In\u00a0[53]: Copied! <pre>output_widget.clear_output()\nlogo = widgets.HTML(\n    value='&lt;img src=\"https://earthengine.google.com/static/images/earth-engine-logo.png\" width=\"100\" height=\"100\"&gt;'\n)\nwith output_widget:\n    display(logo)\n</pre> output_widget.clear_output() logo = widgets.HTML(     value='' ) with output_widget:     display(logo) In\u00a0[54]: Copied! <pre>def handle_interaction(**kwargs):\n    latlon = kwargs.get(\"coordinates\")\n    # latlon = [round(x, 2) for x in latlon]\n    if kwargs.get(\"type\") == \"click\":\n        with output_widget:\n            output_widget.clear_output()\n            print(\"You clicked at: {}\".format(latlon))\n\n\nm.on_interaction(handle_interaction)\n</pre> def handle_interaction(**kwargs):     latlon = kwargs.get(\"coordinates\")     # latlon = [round(x, 2) for x in latlon]     if kwargs.get(\"type\") == \"click\":         with output_widget:             output_widget.clear_output()             print(\"You clicked at: {}\".format(latlon))   m.on_interaction(handle_interaction) In\u00a0[55]: Copied! <pre>items = [widgets.Button(description=str(i + 1)) for i in range(4)]\nwidgets.HBox(items)\n</pre> items = [widgets.Button(description=str(i + 1)) for i in range(4)] widgets.HBox(items) Out[55]: <pre>HBox(children=(Button(description='1', style=ButtonStyle()), Button(description='2', style=ButtonStyle()), But\u2026</pre> In\u00a0[56]: Copied! <pre>items = [widgets.Button(description=str(i + 1)) for i in range(4)]\nwidgets.VBox(items)\n</pre> items = [widgets.Button(description=str(i + 1)) for i in range(4)] widgets.VBox(items) Out[56]: <pre>VBox(children=(Button(description='1', style=ButtonStyle()), Button(description='2', style=ButtonStyle()), But\u2026</pre> In\u00a0[57]: Copied! <pre>import leafmap\n</pre> import leafmap In\u00a0[58]: Copied! <pre>m1 = leafmap.Map()\nm1\n</pre> m1 = leafmap.Map() m1 Out[58]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[59]: Copied! <pre>btn = widgets.Button(icon=\"times\", button_style=\"primary\")\nbtn.layout.width = \"35px\"\nbtn\n</pre> btn = widgets.Button(icon=\"times\", button_style=\"primary\") btn.layout.width = \"35px\" btn Out[59]: <pre>Button(button_style='primary', icon='times', layout=Layout(width='35px'), style=ButtonStyle())</pre> In\u00a0[60]: Copied! <pre>dropdown = widgets.Dropdown(\n    options=[\"OpenStreetMap\", \"OpenTopoMap\", \"Esri.WorldImagery\",  \"CartoDB.DarkMatter\", \"Esri.NatGeoWorldMap\"],\n    value=\"OpenStreetMap\",\n)\ndropdown.layout.width = \"150px\"\ndropdown\n</pre> dropdown = widgets.Dropdown(     options=[\"OpenStreetMap\", \"OpenTopoMap\", \"Esri.WorldImagery\",  \"CartoDB.DarkMatter\", \"Esri.NatGeoWorldMap\"],     value=\"OpenStreetMap\", ) dropdown.layout.width = \"150px\" dropdown Out[60]: <pre>Dropdown(layout=Layout(width='150px'), options=('OpenStreetMap', 'OpenTopoMap', 'Esri.WorldImagery', 'CartoDB.\u2026</pre> In\u00a0[61]: Copied! <pre>box = widgets.HBox([dropdown, btn])\nbox\n</pre> box = widgets.HBox([dropdown, btn]) box Out[61]: <pre>HBox(children=(Dropdown(layout=Layout(width='150px'), options=('OpenStreetMap', 'OpenTopoMap', 'Esri.WorldImag\u2026</pre> In\u00a0[62]: Copied! <pre>#!pip install ipywidgets\n</pre> #!pip install ipywidgets In\u00a0[63]: Copied! <pre>import geotask\n</pre> import geotask In\u00a0[64]: Copied! <pre>m = geotask.Map()\n#m.add_basemap_gui()\nm\n</pre> m = geotask.Map() #m.add_basemap_gui() m Out[64]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[65]: Copied! <pre>m.add_widget(box)\n</pre> m.add_widget(box) In\u00a0[66]: Copied! <pre>m.controls = m.controls[:-1]\n</pre> m.controls = m.controls[:-1]"},{"location":"examples/ipywidgets/#import-libraries","title":"Import libraries\u00b6","text":""},{"location":"examples/ipywidgets/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"examples/ipywidgets/#change-layer-opacity","title":"Change layer opacity\u00b6","text":""},{"location":"examples/ipywidgets/#widget-list","title":"Widget list\u00b6","text":"<p>Widget list: https://ipywidgets.readthedocs.io/en/latest/examples/Widget%20List.html</p> <p>Icons: https://fontawesome.com/v4.7.0/icons</p>"},{"location":"examples/ipywidgets/#numeric-widgets","title":"Numeric widgets\u00b6","text":""},{"location":"examples/ipywidgets/#intslider","title":"IntSlider\u00b6","text":""},{"location":"examples/ipywidgets/#floatslider","title":"FloatSlider\u00b6","text":""},{"location":"examples/ipywidgets/#intprogress","title":"IntProgress\u00b6","text":""},{"location":"examples/ipywidgets/#boolean-widgets","title":"Boolean widgets\u00b6","text":""},{"location":"examples/ipywidgets/#togglebutton","title":"ToggleButton\u00b6","text":""},{"location":"examples/ipywidgets/#checkbox","title":"Checkbox\u00b6","text":""},{"location":"examples/ipywidgets/#selection-widgets","title":"Selection widgets\u00b6","text":""},{"location":"examples/ipywidgets/#dropdown","title":"Dropdown\u00b6","text":""},{"location":"examples/ipywidgets/#radiobuttons","title":"RadioButtons\u00b6","text":""},{"location":"examples/ipywidgets/#string-widgets","title":"String widgets\u00b6","text":""},{"location":"examples/ipywidgets/#text","title":"Text\u00b6","text":""},{"location":"examples/ipywidgets/#textarea","title":"Textarea\u00b6","text":""},{"location":"examples/ipywidgets/#html","title":"HTML\u00b6","text":""},{"location":"examples/ipywidgets/#button","title":"Button\u00b6","text":""},{"location":"examples/ipywidgets/#date-picker","title":"Date picker\u00b6","text":""},{"location":"examples/ipywidgets/#color-picker","title":"Color picker\u00b6","text":""},{"location":"examples/ipywidgets/#output-widget","title":"Output widget\u00b6","text":""},{"location":"examples/ipywidgets/#add-a-widget-to-the-map","title":"Add a widget to the map\u00b6","text":""},{"location":"examples/ipywidgets/#hbox","title":"HBox\u00b6","text":""},{"location":"examples/ipywidgets/#vbox","title":"VBox\u00b6","text":""},{"location":"examples/key_features/","title":"Usage","text":"In\u00a0[1]: Copied! <pre># !pip install geotask geopandas\n</pre> # !pip install geotask geopandas In\u00a0[2]: Copied! <pre>import os\nimport geotask\n</pre> import os import geotask In\u00a0[3]: Copied! <pre>m = geotask.Map(center=(40, -100), zoom=4)\nm\n</pre> m = geotask.Map(center=(40, -100), zoom=4) m Out[3]: In\u00a0[4]: Copied! <pre>m = geotask.Map(height=\"400px\", width=\"800px\")\nm\n</pre> m = geotask.Map(height=\"400px\", width=\"800px\") m Out[4]: In\u00a0[5]: Copied! <pre>m = geotask.Map()\nm.add_basemap(\"OpenTopoMap\")\nm\n</pre> m = geotask.Map() m.add_basemap(\"OpenTopoMap\") m Out[5]: In\u00a0[6]: Copied! <pre>m = geotask.Map()\nm.add_tile_layer(\n    url=\"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\",\n    name=\"Google Satellite\",\n    attribution=\"Google\",\n)\nm\n</pre> m = geotask.Map() m.add_tile_layer(     url=\"https://mt1.google.com/vt/lyrs=y&amp;x={x}&amp;y={y}&amp;z={z}\",     name=\"Google Satellite\",     attribution=\"Google\", ) m Out[6]: In\u00a0[7]: Copied! <pre>m = geotask.Map()\nm.add_raster(\n    data = 'https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif',\n    name = 'DEM'\n)\nm\n</pre> m = geotask.Map() m.add_raster(     data = 'https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif',     name = 'DEM' ) m Out[7]: In\u00a0[8]: Copied! <pre>m = geotask.Map(center=[0, 0], zoom=2)\nin_geojson = \"https://raw.githubusercontent.com/opengeos/leafmap/master/examples/data/cable_geo.geojson\"\nm.add_geojson(in_geojson, layer_name=\"Cable lines\")\nm\n</pre> m = geotask.Map(center=[0, 0], zoom=2) in_geojson = \"https://raw.githubusercontent.com/opengeos/leafmap/master/examples/data/cable_geo.geojson\" m.add_geojson(in_geojson, layer_name=\"Cable lines\") m Out[8]: In\u00a0[9]: Copied! <pre># Add a GeoJSON with random filled color to the map.\nm = geotask.Map(center=[0, 0], zoom=2)\nurl = \"https://raw.githubusercontent.com/opengeos/leafmap/master/examples/data/countries.geojson\"\nstyle = {\"fillOpacity\": 0.5}\nm.add_geojson(\n    url,\n    layer_name=\"Countries\",\n    style=style,\n    fill_colors=[\"red\", \"yellow\", \"green\", \"orange\"],\n)\nm\n</pre> # Add a GeoJSON with random filled color to the map. m = geotask.Map(center=[0, 0], zoom=2) url = \"https://raw.githubusercontent.com/opengeos/leafmap/master/examples/data/countries.geojson\" style = {\"fillOpacity\": 0.5} m.add_geojson(     url,     layer_name=\"Countries\",     style=style,     fill_colors=[\"red\", \"yellow\", \"green\", \"orange\"], ) m Out[9]: In\u00a0[10]: Copied! <pre># Use custom style and hover_style functions.\nm = geotask.Map(center=[0, 0], zoom=2)\nurl = \"https://raw.githubusercontent.com/opengeos/leafmap/master/examples/data/countries.geojson\"\nstyle = {\n    \"stroke\": True,\n    \"color\": \"#0000ff\",\n    \"weight\": 2,\n    \"opacity\": 1,\n    \"fill\": True,\n    \"fillColor\": \"#0000ff\",\n    \"fillOpacity\": 0.1,\n}\nhover_style = {\"fillOpacity\": 0.7}\nm.add_geojson(url, layer_name=\"Countries\", style=style, hover_style=hover_style)\nm\n</pre> # Use custom style and hover_style functions. m = geotask.Map(center=[0, 0], zoom=2) url = \"https://raw.githubusercontent.com/opengeos/leafmap/master/examples/data/countries.geojson\" style = {     \"stroke\": True,     \"color\": \"#0000ff\",     \"weight\": 2,     \"opacity\": 1,     \"fill\": True,     \"fillColor\": \"#0000ff\",     \"fillOpacity\": 0.1, } hover_style = {\"fillOpacity\": 0.7} m.add_geojson(url, layer_name=\"Countries\", style=style, hover_style=hover_style) m Out[10]: In\u00a0[11]: Copied! <pre>m = geotask.Map(center=[0, 0], zoom=2)\nin_shp = \"https://github.com/opengeos/leafmap/raw/master/examples/data/countries.zip\"\nm.add_shp(in_shp, layer_name=\"Countries\")\nm\n</pre> m = geotask.Map(center=[0, 0], zoom=2) in_shp = \"https://github.com/opengeos/leafmap/raw/master/examples/data/countries.zip\" m.add_shp(in_shp, layer_name=\"Countries\") m Out[11]: In\u00a0[12]: Copied! <pre>import geopandas as gpd\nfrom geotask import utils\n\ncsv = \"https://raw.githubusercontent.com/opengeos/data/main/world/world_cities.csv\"\ndf = utils.csv_to_df(csv)\nm = geotask.Map()\nm.add_points(df)\nm\n</pre> import geopandas as gpd from geotask import utils  csv = \"https://raw.githubusercontent.com/opengeos/data/main/world/world_cities.csv\" df = utils.csv_to_df(csv) m = geotask.Map() m.add_points(df) m Out[12]: In\u00a0[13]: Copied! <pre>m = geotask.Map()\nm.add_basemap(\"Esri.NatGeoWorldMap\")\nm\n</pre> m = geotask.Map() m.add_basemap(\"Esri.NatGeoWorldMap\") m Out[13]:"},{"location":"examples/key_features/#key-features","title":"Key Features\u00b6","text":"<p>You can try out geotask by using the cloud-computing platforms below without having to install anything on your computer:</p> <p></p>"},{"location":"examples/key_features/#install-geotask","title":"Install geotask\u00b6","text":""},{"location":"examples/key_features/#use-ipyleaflet-plotting-backend","title":"Use ipyleaflet plotting backend\u00b6","text":""},{"location":"examples/key_features/#create-an-interactive-map","title":"Create an interactive map\u00b6","text":""},{"location":"examples/key_features/#customize-map-height","title":"Customize map height\u00b6","text":""},{"location":"examples/key_features/#change-basemaps","title":"Change basemaps\u00b6","text":""},{"location":"examples/key_features/#add-xyz-tile-layer","title":"Add XYZ tile layer\u00b6","text":""},{"location":"examples/key_features/#add-raster-layer","title":"Add Raster layer\u00b6","text":""},{"location":"examples/key_features/#add-geojson","title":"Add GeoJSON\u00b6","text":""},{"location":"examples/key_features/#add-shapefile","title":"Add shapefile\u00b6","text":""},{"location":"examples/key_features/#add-geodataframe","title":"Add GeoDataFrame\u00b6","text":""},{"location":"examples/key_features/#save-map-to-html","title":"Save map to HTML\u00b6","text":""},{"location":"examples/raster/","title":"Raster","text":"In\u00a0[1]: Copied! <pre>#!pip install geotask\n</pre> #!pip install geotask In\u00a0[2]: Copied! <pre>import geotask\n</pre> import geotask In\u00a0[3]: Copied! <pre>m = geotask.Map(add_layer_control=False)\ndata = 'https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif'\nm.add_raster(data, name = 'DEM')\nm.add_layers_control()\nm\n</pre> m = geotask.Map(add_layer_control=False) data = 'https://github.com/opengeos/datasets/releases/download/raster/srtm90.tif' m.add_raster(data, name = 'DEM') m.add_layers_control() m Out[3]: In\u00a0[4]: Copied! <pre>m.layers[0].interact(opacity=(0.0,1.0,0.1))\n</pre> m.layers[0].interact(opacity=(0.0,1.0,0.1)) Out[4]: In\u00a0[5]: Copied! <pre>m.layers\n</pre> m.layers Out[5]: <pre>(TileLayer(attribution='&amp;copy; &lt;a href=\"https://www.openstreetmap.org/copyright\"&gt;OpenStreetMap&lt;/a&gt; contributors', base=True, max_zoom=19, min_zoom=1, name='OpenStreetMap.Mapnik', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], url='https://tile.openstreetmap.org/{z}/{x}/{y}.png'),\n BoundTileLayer(attribution=\"Raster file served by &lt;a href='https://github.com/banesullivan/localtileserver' target='_blank'&gt;localtileserver&lt;/a&gt;.\", bounds=((36.634011, -120.755927), (38.626923, -117.30451)), max_native_zoom=30, max_zoom=30, name='DEM', options=['attribution', 'bounds', 'detect_retina', 'max_native_zoom', 'max_zoom', 'min_native_zoom', 'min_zoom', 'no_wrap', 'tile_size', 'tms', 'zoom_offset'], show_loading=True, url='http://127.0.0.1:36031/api/tiles/{z}/{x}/{y}.png?&amp;filename=%2Fvsicurl%3Furl%3Dhttps%253A%252F%252Fgithub.com%252Fopengeos%252Fdatasets%252Freleases%252Fdownload%252Fraster%252Fsrtm90.tif%26use_head%3Dno%26list_dir%3Dno'))</pre>"},{"location":"examples/vector/","title":"Vector","text":"In\u00a0[1]: Copied! <pre>#!pip install geotask\n</pre> #!pip install geotask In\u00a0[2]: Copied! <pre>import geotask\n</pre> import geotask In\u00a0[3]: Copied! <pre>from geotask import Map\n</pre> from geotask import Map In\u00a0[4]: Copied! <pre>m = geotask.Map()\nm.add_basemap(\"OpenTopoMap\")\nm.add_geojson(\"europe_110.geo.json\") #using file_path\nm\n</pre> m = geotask.Map() m.add_basemap(\"OpenTopoMap\") m.add_geojson(\"europe_110.geo.json\") #using file_path m Out[4]: In\u00a0[5]: Copied! <pre>m.add_geojson(\"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\")  # using URL\nm\n</pre> m.add_geojson(\"https://github.com/jupyter-widgets/ipyleaflet/raw/master/examples/europe_110.geo.json\")  # using URL m Out[5]: In\u00a0[6]: Copied! <pre>m.add_shp(\"countries.shp\", name = \"Countries\")\nm.add_layers_control()\nm\n</pre> m.add_shp(\"countries.shp\", name = \"Countries\") m.add_layers_control() m Out[6]: In\u00a0[7]: Copied! <pre>m.add_vector('europe_110.geo.json')\nm\n</pre> m.add_vector('europe_110.geo.json') m Out[7]: In\u00a0[8]: Copied! <pre>import geopandas as gpd\nfrom ipyleaflet import GeoData, Polyline\nfrom shapely.geometry import Point, LineString\n\n\n# Create two Points\npoint1 = Point(90.4125, 23.8103)  # Dhaka, Bangladesh\npoint2 = Point(-83.9207, 35.9606) # Knoxville, TN, USA\n\n# Create a Polyline between the two points\nline = LineString([point1, point2])\n\n# Create a list of [latitude, longitude] pairs for the Polyline\npolyline_locations = [[lat, lon] for lon, lat in line.coords]\n\n# Create the Polyline\npolyline = Polyline(locations=polyline_locations, color=\"blue\", name=\"Distance\", fill=False)\n\n# Add the Polyline to the map\nm.add_layer(polyline)\n\n# Display the map\nm\n</pre> import geopandas as gpd from ipyleaflet import GeoData, Polyline from shapely.geometry import Point, LineString   # Create two Points point1 = Point(90.4125, 23.8103)  # Dhaka, Bangladesh point2 = Point(-83.9207, 35.9606) # Knoxville, TN, USA  # Create a Polyline between the two points line = LineString([point1, point2])  # Create a list of [latitude, longitude] pairs for the Polyline polyline_locations = [[lat, lon] for lon, lat in line.coords]  # Create the Polyline polyline = Polyline(locations=polyline_locations, color=\"blue\", name=\"Distance\", fill=False)  # Add the Polyline to the map m.add_layer(polyline)  # Display the map m Out[8]:"},{"location":"lab/lab9/","title":"Lab9","text":"In\u00a0[1]: Copied! <pre>#!pip install geotask\n</pre> #!pip install geotask In\u00a0[2]: Copied! <pre>import geotask\n</pre> import geotask In\u00a0[3]: Copied! <pre>m = geotask.Map()\nm\n</pre> m = geotask.Map() m Out[3]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[4]: Copied! <pre>m.add_basemap_gui()\nm\n</pre> m.add_basemap_gui() m Out[4]: <pre>Map(center=[20, 0], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_text\u2026</pre> In\u00a0[5]: Copied! <pre>m.add_zoom_slider()\n</pre> m.add_zoom_slider() In\u00a0[6]: Copied! <pre>import ipywidgets as widgets\nfrom ipyleaflet import WidgetControl\n</pre> import ipywidgets as widgets from ipyleaflet import WidgetControl In\u00a0[7]: Copied! <pre>output_widget = widgets.Output(layout={\"border\": \"1px solid black\"})\noutput_control = WidgetControl(widget=output_widget, position=\"bottomleft\")\nm.add_control(output_control)\n</pre> output_widget = widgets.Output(layout={\"border\": \"1px solid black\"}) output_control = WidgetControl(widget=output_widget, position=\"bottomleft\") m.add_control(output_control) In\u00a0[8]: Copied! <pre>with output_widget:\n    print(\"Welcome to Geotask!\")\n</pre> with output_widget:     print(\"Welcome to Geotask!\")"},{"location":"lab/lab9/#using-basemaps-in-geotask","title":"Using basemaps in geotask\u00b6","text":""}]}